
==================== FINAL INTERFACE ====================
2017-03-24 17:03:46.614961 UTC

interface primerclip-0.1.0.0-FjE9kCGp25DJvgoKA1Jo8Y:Lib 8001
  interface hash: 957cda29d2ef622e5b9e8d9874fafeb1
  ABI hash: fb58cf6f634718101448366ee5b57cea
  export-list hash: 1aefed444a9c8518a34d440bfad65a4b
  orphan hash: 36bdcac8d85f2a8d8ec8405dfcb8fd40
  flag hash: 9fc82c7dfcf23bff63b9e9de4af755bf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.addprimerints
  Lib.adjustcrds
  Lib.alnp
  Lib.bedint
  Lib.bedmaplookup
  Lib.bedp
  Lib.checkcigseqlen
  Lib.checkcigseqlen2
  Lib.checkpos
  Lib.cigarP
  Lib.contractcigar
  Lib.countDs
  Lib.countTrimdDels
  Lib.defaultAlignment
  Lib.defaultBed
  Lib.expandcigar
  Lib.expandcigar2
  Lib.exrights
  Lib.exrights2
  Lib.filtcigseqmatch
  Lib.filtcigseqmatch2
  Lib.filtmatchrem
  Lib.filtpadassoc
  Lib.filtpadcmap
  Lib.getAlignedLength
  Lib.getBED
  Lib.getNclips
  Lib.getSAM
  Lib.getSAM2
  Lib.getSlength2
  Lib.getcol
  Lib.getlengths
  Lib.intgr2int
  Lib.intvlint
  Lib.itypep
  Lib.ix
  Lib.justbedmaps
  Lib.justchrmaps
  Lib.makebedmap
  Lib.makebedmap2
  Lib.makechrbedmap
  Lib.makeprimertups
  Lib.mapcig
  Lib.mapfst
  Lib.noclip
  Lib.nohardclip
  Lib.nopadding
  Lib.optasp
  Lib.optfieldp
  Lib.optfieldsp
  Lib.optfieldsp2
  Lib.optidp
  Lib.optnmp
  Lib.optxsp
  Lib.parseAln
  Lib.parseAlns
  Lib.parseBED
  Lib.parseCigar
  Lib.parseSAM
  Lib.parsechkBED
  Lib.parsechkSAM
  Lib.parsedbl
  Lib.parseint
  Lib.parsesignedint
  Lib.printAlignment
  Lib.rdint
  Lib.readSAMFlag
  Lib.readint
  Lib.removeDs
  Lib.setpintflag
  Lib.shiftcrds
  Lib.showcigar
  Lib.skipcolon
  Lib.spaces
  Lib.starcigarP
  Lib.sumMatches
  Lib.taketrim
  Lib.toBin
  Lib.toBinInt
  Lib.trimalignment
  Lib.trimboth
  Lib.trimfwd
  Lib.trimrem2
  Lib.trimrev
  Lib.txtfieldp
  Lib.uchrp
  Lib.updateCigB
  Lib.updateCigF
  Lib.updateCigR
  Lib.AlignedRead{Lib.AlignedRead basequal cigar cigmap endpos fint flag mapped mapqual optfields paired pintflag pnext pos qname refseq rint rname rnext strand tlen trimdcigar trimdendpos trimdflag trimdpos}
  Lib.Alignments
  Lib.BED
  Lib.BedMap
  Lib.BedRecord{Lib.BedRecord bedchr bedend bedname bedstart}
  Lib.CMap
  Lib.CigarMap
  Lib.Header
  Lib.SAM
  Lib.SAMFlag{Lib.SAMFlag dupRead failedQC fstInPair intflag mateMapped mateNeg notMapped notPrimary pairNotMapped pairedRead queryPlus sndInPair}
  Lib.UChr{Lib.Chr1 Lib.Chr10 Lib.Chr11 Lib.Chr12 Lib.Chr13 Lib.Chr14 Lib.Chr15 Lib.Chr16 Lib.Chr17 Lib.Chr18 Lib.Chr19 Lib.Chr2 Lib.Chr20 Lib.Chr21 Lib.Chr22 Lib.Chr3 Lib.Chr4 Lib.Chr5 Lib.Chr6 Lib.Chr7 Lib.Chr8 Lib.Chr9 Lib.ChrM Lib.ChrX Lib.ChrY Lib.NONE}
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR
                      base-4.9.0.0 binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      digits-0.3.1@digits-0.3.1-4mVLFgw5UMbHTMvzLfMu2D
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      process-1.4.2.0@process-1.4.2.0
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Char8
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
import  -/  attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Char8 80eaa98c5e6e80a5e76ec0144810146b
import  -/  attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Internal 12bd2699b617343285b7dd722d4d2c67
import  -/  attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Combinator 96030f1f773e1a1af8fdf5e52b5fe445
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Exception 8762ca621bc15a8c1e8e34c703aba1aa
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Bits 0645fbfabc0cdbcabea9f4570dc3c021
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Ord 2c7efd62ddb4235a58939544f667cc29
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Enum fdf7ac3e1b0be0a4a37257601bddad14
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.IO 7ddc7086a7fc3b7d7043cc7bc59a04ba
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 870c31f42ec324353c13bc791ac05fc3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 1a31a1f30d9522329d9076dffd947c78
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base 3e0b3d38b656c29f6b6704d9c7ff80d6
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Strict 6480bb4c7d9fa707cef6369e87f7a8f5
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 2597c3599012c0fa55c30f93a0324f00
import  -/  digits-0.3.1@digits-0.3.1-4mVLFgw5UMbHTMvzLfMu2D:Data.Digits 48011011ab9d19b53a9cc11ba83abd6d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  process-1.4.2.0@process-1.4.2.0:System.Process 88e103887120761eec14b4182c67df9c
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.IO 4bbe6162b66e24a3ce48e078208c8e49
import  -/  vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector a0e152223d52c96cfbb5eb3d4ec6499a
33c0cdbf8224251d1e254cfc05339bff
  $fBoundedUChr :: GHC.Enum.Bounded Lib.UChr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Lib.UChr Lib.Chr1 Lib.NONE -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr :: GHC.Enum.Enum Lib.UChr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.UChr
                  Lib.$fEnumUChr_$csucc
                  Lib.$fEnumUChr_$cpred
                  Lib.$fEnumUChr_$ctoEnum
                  Lib.$fEnumUChr_$cfromEnum
                  Lib.$fEnumUChr_$cenumFrom
                  Lib.$fEnumUChr_$cenumFromThen
                  Lib.$fEnumUChr_$cenumFromTo
                  Lib.$fEnumUChr_$cenumFromThenTo -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr1 :: GHC.Prim.Int# -> Lib.UChr
  {- Arity: 1, Strictness: <L,U>x -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr2 :: Lib.UChr
  {- Strictness: x -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr3 :: Lib.UChr
  {- Strictness: x -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$cenumFrom :: Lib.UChr -> [Lib.UChr]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Lib.UChr) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 25#) of wild {
                   GHC.Types.False -> Lib.$fEnumUChr_go x0
                   GHC.Types.True -> GHC.Types.[] @ Lib.UChr }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$cenumFromThen :: Lib.UChr -> Lib.UChr -> [Lib.UChr]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [Lib.UChr] {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [Lib.UChr]
                            Lib.$fEnumUChr_c1
                            (GHC.Types.[] @ Lib.UChr)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [Lib.UChr]
                            Lib.$fEnumUChr_c1
                            (GHC.Types.[] @ Lib.UChr)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 25# GHC.Types.True -> $j 0# }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$cenumFromThenTo ::
    Lib.UChr -> Lib.UChr -> Lib.UChr -> [Lib.UChr]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: Lib.UChr) (x2 :: Lib.UChr) (y :: Lib.UChr) ->
                 let {
                   x4 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [Lib.UChr]
                        Lib.$fEnumUChr_c
                        (GHC.Types.[] @ Lib.UChr)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ Lib.UChr y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [Lib.UChr]
                        Lib.$fEnumUChr_c
                        (GHC.Types.[] @ Lib.UChr)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ Lib.UChr y) }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$cenumFromTo :: Lib.UChr -> Lib.UChr -> [Lib.UChr]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Lib.UChr) (y :: Lib.UChr) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go6 :: GHC.Prim.Int# -> [Lib.UChr]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ Lib.UChr
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> Lib.$fEnumUChr1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 25#) of wild2 {
                                    GHC.Types.False -> Lib.$fEnumUChr1 x1
                                    GHC.Types.True -> GHC.Prim.tagToEnum# @ Lib.UChr x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go6 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ Lib.UChr })
                      } in
                      go6 x0
                   GHC.Types.True -> GHC.Types.[] @ Lib.UChr }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$cfromEnum :: Lib.UChr -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ Lib.UChr x1) }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$cpred :: Lib.UChr -> Lib.UChr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Lib.UChr x1 of wild {
                   DEFAULT -> GHC.Prim.tagToEnum# @ Lib.UChr (GHC.Prim.+# wild -1#)
                   0# -> Lib.$fEnumUChr2 } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$csucc :: Lib.UChr -> Lib.UChr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Lib.UChr x1 of wild {
                   DEFAULT -> GHC.Prim.tagToEnum# @ Lib.UChr (GHC.Prim.+# wild 1#)
                   25# -> Lib.$fEnumUChr3 } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_$ctoEnum :: GHC.Types.Int -> Lib.UChr
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Lib.$w$ctoEnum ww1 }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_c :: GHC.Types.Int -> [Lib.UChr] -> [Lib.UChr]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [Lib.UChr]) ->
                 GHC.Types.: @ Lib.UChr (Lib.$fEnumUChr_$ctoEnum x) ys) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_c1 :: GHC.Types.Int -> [Lib.UChr] -> [Lib.UChr]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [Lib.UChr]) ->
                 GHC.Types.:
                   @ Lib.UChr
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ Lib.UChr a })
                   ys) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEnumUChr_go :: GHC.Prim.Int# -> [Lib.UChr]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
bc78473094d69907c30e9b2cc9a43b63
  $fEqAlignedRead :: GHC.Classes.Eq Lib.AlignedRead
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.AlignedRead
                  Lib.$fEqAlignedRead_$c==
                  Lib.$fEqAlignedRead_$c/= -}
bc78473094d69907c30e9b2cc9a43b63
  $fEqAlignedRead_$c/= ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)LLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(U,U,U,U),1*U(U),1*U,1*U,1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U(U,U,U,U),1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(S(LLLS)LLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(U,U,U,U),1*U(U),1*U,1*U,1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U(U,U,U,U),1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.AlignedRead) (b :: Lib.AlignedRead) ->
                 case Lib.$fEqAlignedRead_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fEqAlignedRead_$c== ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS)LLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(U,U,U,U),1*U(U),1*U,1*U,1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U(U,U,U,U),1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(S(LLLS)LLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(U,U,U,U),1*U(U),1*U,1*U,1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U(U,U,U,U),1*U,1*U,1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.AlignedRead) (w1 :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case ww1 of ww25 { Data.ByteString.Internal.PS ww26 ww27 ww28 ww29 ->
                 case w1 of ww30 { Lib.AlignedRead ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ww42 ww43 ww44 ww45 ww46 ww47 ww48 ww49 ww50 ww51 ww52 ww53 ww54 ->
                 case ww31 of ww55 { Data.ByteString.Internal.PS ww56 ww57 ww58 ww59 ->
                 Lib.$w$c==
                   ww26
                   ww27
                   ww28
                   ww29
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww56
                   ww57
                   ww58
                   ww59
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   ww42
                   ww43
                   ww44
                   ww45
                   ww46
                   ww47
                   ww48
                   ww49
                   ww50
                   ww51
                   ww52
                   ww53
                   ww54 } } } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fEqBedRecord :: GHC.Classes.Eq Lib.BedRecord
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.BedRecord Lib.$fEqBedRecord_$c== Lib.$fEqBedRecord_$c/= -}
8cf722275c7d20a6dc76732aa294b83f
  $fEqBedRecord_$c/= ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U(U,U,U,U))><S(SLLL),1*U(1*U,1*U,1*U,1*U(U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.BedRecord) (b :: Lib.BedRecord) ->
                 case Lib.$fEqBedRecord_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fEqBedRecord_$c== ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U(U,U,U,U))><S(SLLL),1*U(1*U,1*U,1*U,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 Lib.$w$c==1 ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 } }) -}
b8957f6f02a8d5347a149e45b54b08f6
  $fEqSAMFlag :: GHC.Classes.Eq Lib.SAMFlag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.SAMFlag Lib.$fEqSAMFlag_$c== Lib.$fEqSAMFlag_$c/= -}
b8957f6f02a8d5347a149e45b54b08f6
  $fEqSAMFlag_$c/= :: Lib.SAMFlag -> Lib.SAMFlag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(U))><S(SLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.SAMFlag) (b :: Lib.SAMFlag) ->
                 case Lib.$fEqSAMFlag_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b8957f6f02a8d5347a149e45b54b08f6
  $fEqSAMFlag_$c== :: Lib.SAMFlag -> Lib.SAMFlag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(U))><S(SLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.SAMFlag) (w1 :: Lib.SAMFlag) ->
                 case w of ww { Lib.SAMFlag ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case w1 of ww13 { Lib.SAMFlag ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ->
                 Lib.$w$c==2
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25 } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEqUChr :: GHC.Classes.Eq Lib.UChr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Lib.UChr Lib.$fEqUChr_$c== Lib.$fEqUChr_$c/= -}
33c0cdbf8224251d1e254cfc05339bff
  $fEqUChr_$c/= :: Lib.UChr -> Lib.UChr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Lib.UChr x1)
                           (GHC.Prim.dataToTag# @ Lib.UChr x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fEqUChr_$c== :: Lib.UChr -> Lib.UChr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Lib.UChr x1)
                      (GHC.Prim.dataToTag# @ Lib.UChr x2)) } }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead :: GHC.Classes.Ord Lib.AlignedRead
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.AlignedRead
                  Lib.$fEqAlignedRead
                  Lib.$fOrdAlignedRead_$ccompare
                  Lib.$fOrdAlignedRead_$c<
                  Lib.$fOrdAlignedRead_$c<=
                  Lib.$fOrdAlignedRead_$c>
                  Lib.$fOrdAlignedRead_$c>=
                  Lib.$fOrdAlignedRead_$cmax
                  Lib.$fOrdAlignedRead_$cmin -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$c< ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.AlignedRead) (y :: Lib.AlignedRead) ->
                 case Lib.$fOrdAlignedRead_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$c<= ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.AlignedRead) (y :: Lib.AlignedRead) ->
                 case Lib.$fOrdAlignedRead_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$c> ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.AlignedRead) (y :: Lib.AlignedRead) ->
                 case Lib.$fOrdAlignedRead_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$c>= ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.AlignedRead) (y :: Lib.AlignedRead) ->
                 case Lib.$fOrdAlignedRead_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$ccompare ::
    Lib.AlignedRead -> Lib.AlignedRead -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.AlignedRead) (w1 :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case w1 of ww25 { Lib.AlignedRead ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ww42 ww43 ww44 ww45 ww46 ww47 ww48 ww49 ->
                 Lib.$w$ccompare ww3 ww4 ww6 ww28 ww29 ww31 } }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$cmax ::
    Lib.AlignedRead -> Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LLSLLLLLLLLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.AlignedRead) (y :: Lib.AlignedRead) ->
                 case Lib.$fOrdAlignedRead_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fOrdAlignedRead_$cmin ::
    Lib.AlignedRead -> Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(LLSLLLLLLLLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.AlignedRead) (y :: Lib.AlignedRead) ->
                 case Lib.$fOrdAlignedRead_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord :: GHC.Classes.Ord Lib.BedRecord
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.BedRecord
                  Lib.$fEqBedRecord
                  Lib.$fOrdBedRecord_$ccompare
                  Lib.$fOrdBedRecord_$c<
                  Lib.$fOrdBedRecord_$c<=
                  Lib.$fOrdBedRecord_$c>
                  Lib.$fOrdBedRecord_$c>=
                  Lib.$fOrdBedRecord_$cmax
                  Lib.$fOrdBedRecord_$cmin -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$c< ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,A,A)><S(SLLL),1*U(1*U,1*U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 Lib.$w$c< ww1 ww2 ww6 ww7 } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$c<= ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,A,A)><S(SLLL),1*U(1*U,1*U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 Lib.$w$c<= ww1 ww2 ww6 ww7 } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$c> ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,A,A)><S(SLLL),1*U(1*U,1*U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 Lib.$w$c> ww1 ww2 ww6 ww7 } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$c>= ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,A,A)><S(SLLL),1*U(1*U,1*U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 Lib.$w$c>= ww1 ww2 ww6 ww7 } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$ccompare ::
    Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,A,A)><S(SLLL),1*U(1*U,1*U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 Lib.$w$ccompare1 ww1 ww2 ww6 ww7 } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$cmax ::
    Lib.BedRecord -> Lib.BedRecord -> Lib.BedRecord
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww6
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> Lib.BedRecord ww1 ww2 ww3 ww4
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww2 ww7 of wild2 {
                             DEFAULT -> Lib.BedRecord ww6 ww7 ww8 ww9
                             GHC.Types.GT -> Lib.BedRecord ww1 ww2 ww3 ww4 } }
                   GHC.Types.True -> Lib.BedRecord ww6 ww7 ww8 ww9 } } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fOrdBedRecord_$cmin ::
    Lib.BedRecord -> Lib.BedRecord -> Lib.BedRecord
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.BedRecord) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Lib.BedRecord ww6 ww7 ww8 ww9 ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww6
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> Lib.BedRecord ww6 ww7 ww8 ww9
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww2 ww7 of wild2 {
                             DEFAULT -> Lib.BedRecord ww1 ww2 ww3 ww4
                             GHC.Types.GT -> Lib.BedRecord ww6 ww7 ww8 ww9 } }
                   GHC.Types.True -> Lib.BedRecord ww1 ww2 ww3 ww4 } } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr :: GHC.Classes.Ord Lib.UChr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.UChr
                  Lib.$fEqUChr
                  Lib.$fOrdUChr_$ccompare
                  Lib.$fOrdUChr_$c<
                  Lib.$fOrdUChr_$c<=
                  Lib.$fOrdUChr_$c>
                  Lib.$fOrdUChr_$c>=
                  Lib.$fOrdUChr_$cmax
                  Lib.$fOrdUChr_$cmin -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$c< :: Lib.UChr -> Lib.UChr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ Lib.UChr x1)
                      (GHC.Prim.dataToTag# @ Lib.UChr x2)) } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$c<= :: Lib.UChr -> Lib.UChr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ Lib.UChr x1)
                      (GHC.Prim.dataToTag# @ Lib.UChr x2)) } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$c> :: Lib.UChr -> Lib.UChr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ Lib.UChr x1)
                      (GHC.Prim.dataToTag# @ Lib.UChr x2)) } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$c>= :: Lib.UChr -> Lib.UChr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ Lib.UChr x1)
                      (GHC.Prim.dataToTag# @ Lib.UChr x2)) } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$ccompare :: Lib.UChr -> Lib.UChr -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.UChr) (b :: Lib.UChr) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr x2
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$cmax :: Lib.UChr -> Lib.UChr -> Lib.UChr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.UChr) (y :: Lib.UChr) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Lib.UChr x1)
                           (GHC.Prim.dataToTag# @ Lib.UChr x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fOrdUChr_$cmin :: Lib.UChr -> Lib.UChr -> Lib.UChr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.UChr) (y :: Lib.UChr) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Lib.UChr x1)
                           (GHC.Prim.dataToTag# @ Lib.UChr x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fShowAlignedRead :: GHC.Show.Show Lib.AlignedRead
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.AlignedRead
                  Lib.$fShowAlignedRead_$cshowsPrec
                  Lib.$fShowAlignedRead_$cshow
                  Lib.$fShowAlignedRead_$cshowList -}
bc78473094d69907c30e9b2cc9a43b63
  $fShowAlignedRead1 :: Lib.AlignedRead -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.AlignedRead) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Lib.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   w1 }) -}
bc78473094d69907c30e9b2cc9a43b63
  $fShowAlignedRead_$cshow :: Lib.AlignedRead -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U,U),1*U(U),1*U,U,U,U,1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U(U,U,U,U),U,U,1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.AlignedRead) ->
                 Lib.$fShowAlignedRead_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bc78473094d69907c30e9b2cc9a43b63
  $fShowAlignedRead_$cshowList :: [Lib.AlignedRead] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lib.AlignedRead
                   Lib.$fShowAlignedRead1) -}
bc78473094d69907c30e9b2cc9a43b63
  $fShowAlignedRead_$cshowsPrec ::
    GHC.Types.Int -> Lib.AlignedRead -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U,U),1*U(U),1*U,U,U,U,1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U(U,U,U,U),U,U,1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U(U,U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.AlignedRead)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.AlignedRead ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 Lib.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   w2 } }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fShowBedRecord :: GHC.Show.Show Lib.BedRecord
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.BedRecord
                  Lib.$fShowBedRecord_$cshowsPrec
                  Lib.$fShowBedRecord_$cshow1
                  Lib.$fShowBedRecord_$cshowList -}
8cf722275c7d20a6dc76732aa294b83f
  $fShowBedRecord1 :: Lib.BedRecord -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.BedRecord) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 Lib.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 w1 }) -}
61d80ffa593c7fb4afcb24d8a725f98e
  $fShowBedRecord10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Y"#) -}
1c9131fc009f4f6be21003b9b61d1ccb
  $fShowBedRecord11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "X"#) -}
412dc5a4ab69c1495fe46e063c64e19b
  $fShowBedRecord12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "22"#) -}
d8732b2933c7324a6f914ced611203dd
  $fShowBedRecord13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "21"#) -}
cc4d430084f9f5b4712e9b79380d3fca
  $fShowBedRecord14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "20"#) -}
e6fb1c996880d3f2ffd8698351e43ebd
  $fShowBedRecord15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "19"#) -}
91a923b0219407f0cc4ff6926fb56b8f
  $fShowBedRecord16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "18"#) -}
d005530b10a964eb3cdfad373ed56402
  $fShowBedRecord17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "17"#) -}
c39c397d4e6506c999c6a502dba5012f
  $fShowBedRecord18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "16"#) -}
caadb289971fe63877f3bd53fc8c7d8e
  $fShowBedRecord19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "15"#) -}
36bd25427c1e0e396d7b9b2a6cf9a3e3
  $fShowBedRecord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BedRecord {"#) -}
847db3f69776f93957196dce5b688583
  $fShowBedRecord20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "14"#) -}
c9ef770e0e77409acbaa6b475c3773f0
  $fShowBedRecord21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "13"#) -}
2b3b3ac8a472fe941812f6dd665d1f61
  $fShowBedRecord22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "12"#) -}
e1ca053037a1a213d5bfa242719eaf79
  $fShowBedRecord23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "11"#) -}
a142f7407b929df356ae2bd150c7e2b2
  $fShowBedRecord24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "10"#) -}
e8243948e5c3d959ec8c5dd5e8905dc0
  $fShowBedRecord25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "9"#) -}
10a47dfc8bb322d2a12ee192d7ee986c
  $fShowBedRecord26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "8"#) -}
16f18815d2d4ef1ff9fd1cc26cb4ca2b
  $fShowBedRecord27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "7"#) -}
36a8ea64fbc53193b0907b3266923bf5
  $fShowBedRecord28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "6"#) -}
5bd37e6d5327e1edb4d8aa61c904ac6e
  $fShowBedRecord29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "5"#) -}
4cc8841333e15e14cabfe48ea63ce699
  $fShowBedRecord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
863521f52411874cba15ce8ea289ee60
  $fShowBedRecord30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "4"#) -}
fbf9b27640703fc863c64978280abe93
  $fShowBedRecord31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "3"#) -}
2cf65ce520a6e08e435fd58f6c8378b4
  $fShowBedRecord32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "2"#) -}
dcdb7edc12e298e509447ece5c26c583
  $fShowBedRecord33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1"#) -}
9ec0ec8ebf510af32c2217879cf210b7
  $fShowBedRecord34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bedchr = "#) -}
13a30487c94060bdd688b376e84d3237
  $fShowBedRecord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bedname = "#) -}
abb7b3d8890992222a1b31c8e292a0d0
  $fShowBedRecord5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bedend = "#) -}
f1dcefe9fb64d526e0fb0c3bbb567d90
  $fShowBedRecord6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bedstart = "#) -}
0c7e32fd3dbb54e2e02f5bc479a4e0e5
  $fShowBedRecord7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
66c2467a03fc80aee68ee2ca9f6583e3
  $fShowBedRecord8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
53ad1e3b83d2f6b508f8d97cb3bd421f
  $fShowBedRecord9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MT"#) -}
33c0cdbf8224251d1e254cfc05339bff
  $fShowBedRecord_$cshow :: Lib.UChr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Lib.UChr) ->
                 case ds of wild {
                   Lib.Chr1 -> Lib.$fShowBedRecord33
                   Lib.Chr2 -> Lib.$fShowBedRecord32
                   Lib.Chr3 -> Lib.$fShowBedRecord31
                   Lib.Chr4 -> Lib.$fShowBedRecord30
                   Lib.Chr5 -> Lib.$fShowBedRecord29
                   Lib.Chr6 -> Lib.$fShowBedRecord28
                   Lib.Chr7 -> Lib.$fShowBedRecord27
                   Lib.Chr8 -> Lib.$fShowBedRecord26
                   Lib.Chr9 -> Lib.$fShowBedRecord25
                   Lib.Chr10 -> Lib.$fShowBedRecord24
                   Lib.Chr11 -> Lib.$fShowBedRecord23
                   Lib.Chr12 -> Lib.$fShowBedRecord22
                   Lib.Chr13 -> Lib.$fShowBedRecord21
                   Lib.Chr14 -> Lib.$fShowBedRecord20
                   Lib.Chr15 -> Lib.$fShowBedRecord19
                   Lib.Chr16 -> Lib.$fShowBedRecord18
                   Lib.Chr17 -> Lib.$fShowBedRecord17
                   Lib.Chr18 -> Lib.$fShowBedRecord16
                   Lib.Chr19 -> Lib.$fShowBedRecord15
                   Lib.Chr20 -> Lib.$fShowBedRecord14
                   Lib.Chr21 -> Lib.$fShowBedRecord13
                   Lib.Chr22 -> Lib.$fShowBedRecord12
                   Lib.ChrX -> Lib.$fShowBedRecord11
                   Lib.ChrY -> Lib.$fShowBedRecord10
                   Lib.ChrM -> Lib.$fShowBedRecord9
                   Lib.NONE -> Lib.$fShowBedRecord8 }) -}
8cf722275c7d20a6dc76732aa294b83f
  $fShowBedRecord_$cshow1 :: Lib.BedRecord -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U,U,1*U(U,U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.BedRecord) ->
                 Lib.$fShowBedRecord_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8cf722275c7d20a6dc76732aa294b83f
  $fShowBedRecord_$cshowList :: [Lib.BedRecord] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lib.BedRecord
                   Lib.$fShowBedRecord1) -}
8cf722275c7d20a6dc76732aa294b83f
  $fShowBedRecord_$cshowsPrec ::
    GHC.Types.Int -> Lib.BedRecord -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,U,U,1*U(U,U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.BedRecord)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.BedRecord ww3 ww4 ww5 ww6 ->
                 Lib.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 w2 } }) -}
b8957f6f02a8d5347a149e45b54b08f6
  $fShowSAMFlag :: GHC.Show.Show Lib.SAMFlag
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.SAMFlag
                  Lib.$fShowSAMFlag_$cshowsPrec
                  Lib.$fShowSAMFlag_$cshow
                  Lib.$fShowSAMFlag_$cshowList -}
b8957f6f02a8d5347a149e45b54b08f6
  $fShowSAMFlag1 :: Lib.SAMFlag -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.SAMFlag) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.SAMFlag ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Lib.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   w1 }) -}
b8957f6f02a8d5347a149e45b54b08f6
  $fShowSAMFlag_$cshow :: Lib.SAMFlag -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.SAMFlag) ->
                 Lib.$fShowSAMFlag_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b8957f6f02a8d5347a149e45b54b08f6
  $fShowSAMFlag_$cshowList :: [Lib.SAMFlag] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lib.SAMFlag
                   Lib.$fShowSAMFlag1) -}
b8957f6f02a8d5347a149e45b54b08f6
  $fShowSAMFlag_$cshowsPrec ::
    GHC.Types.Int -> Lib.SAMFlag -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.SAMFlag)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.SAMFlag ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Lib.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   w2 } }) -}
33c0cdbf8224251d1e254cfc05339bff
  $fShowUChr :: GHC.Show.Show Lib.UChr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.UChr
                  Lib.$fShowUChr_$cshowsPrec
                  Lib.$fShowBedRecord_$cshow
                  Lib.$fShowUChr_$cshowList -}
33c0cdbf8224251d1e254cfc05339bff
  $fShowUChr1 :: Lib.UChr -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Lib.UChr) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Lib.$fShowBedRecord_$cshow x) s) -}
33c0cdbf8224251d1e254cfc05339bff
  $fShowUChr_$cshowList :: [Lib.UChr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Lib.UChr]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Lib.UChr Lib.$fShowUChr1 ls s) -}
33c0cdbf8224251d1e254cfc05339bff
  $fShowUChr_$cshowsPrec ::
    GHC.Types.Int -> Lib.UChr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int) (x :: Lib.UChr) (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c1
                      n
                      (Lib.$fShowBedRecord_$cshow x))
                   s) -}
c4f885a4dd4ef93c6fd37db50a0cdaa0
  $s$fEq(,) ::
    GHC.Classes.Eq
      (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Integer.Type.Integer
                     @ Data.ByteString.Internal.ByteString
                     GHC.Integer.Type.$fEqInteger
                     Data.ByteString.Internal.$fEqByteString)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Integer.Type.Integer
                     @ Data.ByteString.Internal.ByteString
                     GHC.Integer.Type.$fEqInteger
                     Data.ByteString.Internal.$fEqByteString) -}
106a81d9462c4bbdd2b7f398f94c89da
  $sfromList ::
    [(GHC.Types.Int, a)] -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Int, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Int @ a
                   : ds2 ds3
                   -> case ds2 of wild1 { (,) kx x ->
                      case ds3 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Int
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds4 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                Lib.$wpoly_go4
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x0
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2 }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                Lib.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x0
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2 } } } } } } } }) -}
795b6d867a7a91109d5368e2529eea1a
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Int a1
    -> [(GHC.Types.Int, a1)] -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c9728c3bab05e39323805c2b7c29163d
  $sfromList2 :: [(Lib.UChr, a)] -> Data.Map.Base.Map Lib.UChr a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Lib.UChr, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Lib.UChr @ a
                   : ds2 ds3
                   -> case ds2 of wild1 { (,) kx x ->
                      case ds3 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ Lib.UChr
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Base.Tip @ Lib.UChr @ a)
                             (Data.Map.Base.Tip @ Lib.UChr @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds4 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=#
                                     (GHC.Prim.dataToTag# @ Lib.UChr kx)
                                     (GHC.Prim.dataToTag# @ Lib.UChr ky)) of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                Lib.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Lib.UChr
                                     @ a
                                     1#
                                     kx
                                     x0
                                     (Data.Map.Base.Tip @ Lib.UChr @ a)
                                     (Data.Map.Base.Tip @ Lib.UChr @ a))
                                  wild2 }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                Lib.$sfromList3
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Lib.UChr
                                     @ a
                                     1#
                                     kx
                                     x0
                                     (Data.Map.Base.Tip @ Lib.UChr @ a)
                                     (Data.Map.Base.Tip @ Lib.UChr @ a))
                                  wild2 } } } } } }) -}
4571b8a73b18fd050617bc8aa5b0ba1e
  $sfromList3 ::
    Data.Map.Base.Map Lib.UChr a1
    -> [(Lib.UChr, a1)] -> Data.Map.Base.Map Lib.UChr a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0ff202bfae479653289dd2625fc6993e
  $sinsert_$sgo4 ::
    Lib.UChr
    -> a1
    -> Data.Map.Base.Map Lib.UChr a1
    -> Data.Map.Base.Map Lib.UChr a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
7569ec1d176da010cc184ae791dea8f3
  $slookup1 ::
    Lib.UChr -> Data.Map.Base.Map Lib.UChr a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
4f17dc4309c5d83a38f34f6028839520
  $tc'AlignedRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9391998166803268121##
                   12037359213558672724##
                   Lib.$trModule
                   Lib.$tc'AlignedRead1) -}
a95ceb4268b8a2ec2ae9d0a9c766853f
  $tc'AlignedRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AlignedRead"#) -}
8c9c922b416375cc82f6af17d06ae6e9
  $tc'BedRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14496407729538087624##
                   9106556273669699858##
                   Lib.$trModule
                   Lib.$tc'BedRecord1) -}
8dc5cc85ca3cf268d9385e9e1cd4f8f8
  $tc'BedRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BedRecord"#) -}
e0641c3135995a15d0b7eb2db191c1e8
  $tc'Chr1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15691186518957835653##
                   6170524384774699129##
                   Lib.$trModule
                   Lib.$tc'Chr29) -}
cffbce49414c2869f3c37a524a0331bb
  $tc'Chr10 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18139205266709430341##
                   16608473090339827039##
                   Lib.$trModule
                   Lib.$tc'Chr30) -}
933296ac9cf76762b8e1e487eb4da564
  $tc'Chr11 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11005076602203858107##
                   2544411176478266537##
                   Lib.$trModule
                   Lib.$tc'Chr31) -}
b0064b9459bcacc16a26755f165f29ca
  $tc'Chr12 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12767814329681007682##
                   4044610568004763850##
                   Lib.$trModule
                   Lib.$tc'Chr32) -}
17a54c03787770cc616e6fe7fbe288ab
  $tc'Chr13 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13843499161277917643##
                   14332065964588474372##
                   Lib.$trModule
                   Lib.$tc'Chr33) -}
738226dc035dea624b3b1c9fe4d52414
  $tc'Chr14 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6837254186045462180##
                   1734205700674557685##
                   Lib.$trModule
                   Lib.$tc'Chr34) -}
edf312af7e354654cdd92b5fc8479db9
  $tc'Chr15 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13070986718796509264##
                   11658884740393701454##
                   Lib.$trModule
                   Lib.$tc'Chr35) -}
267ad444334eca245ad993243cf49617
  $tc'Chr16 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2175427844513267234##
                   9559142946053539112##
                   Lib.$trModule
                   Lib.$tc'Chr36) -}
985c3783657d71099b2730b4de65d509
  $tc'Chr17 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11231471268951359436##
                   18016594363020331273##
                   Lib.$trModule
                   Lib.$tc'Chr37) -}
5b0c42fc74e8929a823725f2cfc4f2c1
  $tc'Chr18 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13725333715586096794##
                   12704777920486762294##
                   Lib.$trModule
                   Lib.$tc'Chr38) -}
2420ca8d53a52ce753c901fe029e6df0
  $tc'Chr19 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13099068084528676769##
                   11901211180073833408##
                   Lib.$trModule
                   Lib.$tc'Chr39) -}
3df5ffcf5b59a714239cdbcb59ed875d
  $tc'Chr2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4484900344299442118##
                   12451057742975715519##
                   Lib.$trModule
                   Lib.$tc'Chr40) -}
771e7d6c4b14ff609da5fffca21a0493
  $tc'Chr20 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16810260156811134549##
                   9658076374864956685##
                   Lib.$trModule
                   Lib.$tc'Chr41) -}
546bc3ea885100a871b4948335d12e80
  $tc'Chr21 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12793740477579354742##
                   8497083297414457228##
                   Lib.$trModule
                   Lib.$tc'Chr42) -}
3bca8dd61efb3d34a8055ca467695e7a
  $tc'Chr22 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6786264419951043808##
                   16269107177488588336##
                   Lib.$trModule
                   Lib.$tc'Chr43) -}
1767c685cc075342ab892176cea28895
  $tc'Chr29 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr1"#) -}
5e058279f25d5f33c7043210d89dbdc2
  $tc'Chr3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17351785895488401035##
                   12715319596423899258##
                   Lib.$trModule
                   Lib.$tc'Chr44) -}
caa2be463730ff1aa4db460980cd7bae
  $tc'Chr30 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr10"#) -}
1d040535e6b7237f9c3b0c854b02ad98
  $tc'Chr31 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr11"#) -}
405f065e7fa653212605e36b6161f5b8
  $tc'Chr32 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr12"#) -}
30e0bbd65edd56238098cca318b82234
  $tc'Chr33 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr13"#) -}
d90c1f30a03b0e6c3e1f2c4c5d67d75e
  $tc'Chr34 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr14"#) -}
4d2873a5e8698f7b78db26c07471c90b
  $tc'Chr35 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr15"#) -}
3300cb770cf8ce012e12f02732d7a675
  $tc'Chr36 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr16"#) -}
bb740e27b2c6cc16d48720d6d2c32f7d
  $tc'Chr37 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr17"#) -}
623418c8710681fcbfd5b3c23718e823
  $tc'Chr38 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr18"#) -}
d9314e465a27be680d8355a1eedd2729
  $tc'Chr39 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr19"#) -}
6a784cacc6891f82c7fc789ff9c4ebda
  $tc'Chr4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11419221560894403696##
                   15842833402708671561##
                   Lib.$trModule
                   Lib.$tc'Chr45) -}
ede0a3467ac6c6ae88c9061d09a8cf5b
  $tc'Chr40 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr2"#) -}
216bdd36f0b109ec18db355fb5e52dfb
  $tc'Chr41 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr20"#) -}
3c73f2007c77b22b5dbfa835bf481e2c
  $tc'Chr42 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr21"#) -}
8b9c3cd84321121252e65191fd700b25
  $tc'Chr43 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr22"#) -}
dde032fe87f3c3a2687b7bb7d3b79fd5
  $tc'Chr44 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr3"#) -}
f20a9364d362bae9a69e52c435ed744c
  $tc'Chr45 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr4"#) -}
ed66cd42e44aa50a66cb239ab8881aee
  $tc'Chr46 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr5"#) -}
d943038b5ce7adfd31070002c56e8e55
  $tc'Chr47 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr6"#) -}
4c419a86ba699eb41ddac865baba7ab5
  $tc'Chr48 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr7"#) -}
5aab1fe8d337aa18b29b05e36afa54e6
  $tc'Chr49 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr8"#) -}
e00f3460f8936844aa7e21622bfde154
  $tc'Chr5 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5151902324619306068##
                   3458235202116610966##
                   Lib.$trModule
                   Lib.$tc'Chr46) -}
17bc0fd281b683dd9bb2f779c1629bb4
  $tc'Chr50 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chr9"#) -}
5f575d2f43e4175e28bb4dde7ef30db6
  $tc'Chr6 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13535324239176933081##
                   12800410238843043984##
                   Lib.$trModule
                   Lib.$tc'Chr47) -}
5f576460d3885e334064b39266e14e51
  $tc'Chr7 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4811714341899936999##
                   8797955268754596482##
                   Lib.$trModule
                   Lib.$tc'Chr48) -}
03a8ddc551db81d5eba88c30036afad1
  $tc'Chr8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12649712358773242901##
                   7032477700895970544##
                   Lib.$trModule
                   Lib.$tc'Chr49) -}
bb73e42ade3c0c898b49782adfbb553d
  $tc'Chr9 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17280913528536546988##
                   1502108172893650050##
                   Lib.$trModule
                   Lib.$tc'Chr50) -}
c81f5aaf0b3e7efbf80e4e2b5b5f635b
  $tc'ChrM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5260466583724621983##
                   3860511178351428637##
                   Lib.$trModule
                   Lib.$tc'ChrM1) -}
54801b21c725a9ef3ea32465552f0fd3
  $tc'ChrM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ChrM"#) -}
9e988c9e4e430538cadf17eba592976c
  $tc'ChrX :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18360423410320590768##
                   17181954305990634986##
                   Lib.$trModule
                   Lib.$tc'ChrX1) -}
56335f01706f5fe89e0ada62cf903d64
  $tc'ChrX1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ChrX"#) -}
93723b98fef3eddf0ab5da1448f93f59
  $tc'ChrY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9847702376142794525##
                   11990987871678418423##
                   Lib.$trModule
                   Lib.$tc'ChrY1) -}
a83b08ceedecd3154500062c9d1aad70
  $tc'ChrY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ChrY"#) -}
5490a1c3665480b87b16d1ec244aeeaf
  $tc'NONE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18389729407024436339##
                   4252454704957969232##
                   Lib.$trModule
                   Lib.$tc'NONE1) -}
42a91b86b66facbef668afffed5fb65a
  $tc'NONE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NONE"#) -}
808835b099cc8084e531c1e9be266435
  $tc'SAMFlag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1976906449763390428##
                   7024444796876836946##
                   Lib.$trModule
                   Lib.$tc'SAMFlag1) -}
79418656e7ed3141f2a211ac3c5bf507
  $tc'SAMFlag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SAMFlag"#) -}
af1782bafe03e6c73df639a7b50f35aa
  $tcAlignedRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8036004553734235591##
                   17758255834482492294##
                   Lib.$trModule
                   Lib.$tcAlignedRead1) -}
09a13359bc357b7c3c8651a753080d90
  $tcAlignedRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AlignedRead"#) -}
d62be549fa7133db65eaa8d385b517c0
  $tcBedRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   538866398974089943##
                   16294502678581327584##
                   Lib.$trModule
                   Lib.$tcBedRecord1) -}
74634a597cc6e1e9d897775737b35d61
  $tcBedRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BedRecord"#) -}
a01a0deb2bc94c10f7dc1531e53069a9
  $tcSAMFlag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5233123646150837690##
                   13160691531544760157##
                   Lib.$trModule
                   Lib.$tcSAMFlag1) -}
9cbf2a4f222ae656f24672650943ec2d
  $tcSAMFlag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SAMFlag"#) -}
ee9bbed298115e49c8ff8354c488534a
  $tcUChr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14819878737504552110##
                   2191049274074191648##
                   Lib.$trModule
                   Lib.$tcUChr1) -}
1ee7c2586caa2e5239e0bc9986e248d3
  $tcUChr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UChr"#) -}
9902df6000f3a616941555c50a322e92
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
50ff01a55aedf8e93463b30a6aa9d185
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
3f12df2ed50f99d754162cd933949e63
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "primerclip-0.1.0.0-FjE9kCGp25DJvgoKA1Jo8Y"#) -}
47c50a4da4993179eb263093b4d59f48
  $w$c< ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww1 ww3 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } }
                   GHC.Types.True -> GHC.Types.True }) -}
ec84b581db33ec49670df9ef8d1c5c5c
  $w$c<= ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww1 ww3 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.True }) -}
d2530b2e4cd9609dceca42f94dbc4feb
  $w$c== ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 54, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U><L,1*U(U,U,U,U)><L,1*U><L,1*U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U><L,U><L,U><S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U><L,1*U(U,U,U,U)><L,1*U><L,1*U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
1e4e55944c65915f5c9f1759ca5bb818
  $w$c==1 ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U(U,U,U,U)><S,1*U><L,1*U><L,1*U><L,1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Data.ByteString.Internal.ByteString)
                   (ww4 :: Lib.UChr)
                   (ww5 :: GHC.Integer.Type.Integer)
                   (ww6 :: GHC.Integer.Type.Integer)
                   (ww7 :: Data.ByteString.Internal.ByteString) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Lib.UChr ww)
                           (GHC.Prim.dataToTag# @ Lib.UChr ww4)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger# ww1 ww5 of wild1 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Integer.Type.eqInteger# ww2 ww6 of wild3 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Data.ByteString.Internal.eq ww3 ww7 } } } } }) -}
001129910e38f9de44155f01b373bcc1
  $w$c==2 ::
    GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 24, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U)>,
     Inline: [0] -}
6c9900c45521e31f7ab89c33d7b08543
  $w$c> ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww1 ww3 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } }
                   GHC.Types.True -> GHC.Types.False }) -}
604a8941b7c3e59d72f8cdc36493174c
  $w$c>= ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww1 ww3 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.False }) -}
08492c36e51655dff68afb2bd9609b07
  $w$ccompare ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Ordering
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Lib.UChr)
                   (ww4 :: GHC.Integer.Type.Integer)
                   (ww5 :: GHC.Integer.Type.Integer) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww3
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> case GHC.Integer.Type.compareInteger ww1 ww4 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Integer.Type.compareInteger ww2 ww5
                             GHC.Types.GT -> GHC.Types.GT } }
                   GHC.Types.True -> GHC.Types.LT }) -}
22aaa072f54d09e591f9e1d7e9f755fc
  $w$ccompare1 ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ Lib.UChr ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Integer.Type.compareInteger ww1 ww3 }
                   GHC.Types.True -> GHC.Types.LT }) -}
a9e14daf005a7ae40de06526ef071f58
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 26,
     Strictness: <S,U><L,1*U(U,U,U,U)><L,1*U(U)><L,1*U><L,U><L,U><L,U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U><L,1*U(U,U,U,U)><L,U><L,U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U><L,U><L,U>,
     Inline: [0] -}
9ecfd2a5041af90933e3f5bc3afd8fb1
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U><L,U><L,U><L,1*U(U,U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Lib.UChr)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (ww4 :: Data.ByteString.Internal.ByteString)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowBedRecord34
                       (GHC.Base.++
                          @ GHC.Types.Char
                          (Lib.$fShowBedRecord_$cshow ww1)
                          (GHC.Base.++
                             @ GHC.Types.Char
                             Lib.$fShowBedRecord7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowBedRecord6
                                (case GHC.Show.$w$cshowsPrec3
                                        0#
                                        ww2
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           Lib.$fShowBedRecord7
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Lib.$fShowBedRecord5
                                              (case GHC.Show.$w$cshowsPrec3
                                                      0#
                                                      ww3
                                                      (GHC.Base.++
                                                         @ GHC.Types.Char
                                                         Lib.$fShowBedRecord7
                                                         (GHC.Base.++
                                                            @ GHC.Types.Char
                                                            Lib.$fShowBedRecord4
                                                            (GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.shows8
                                                               (case ww4 of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                                                                GHC.Show.showLitString
                                                                  (Data.ByteString.Internal.$wunpackAppendCharsLazy
                                                                     ww6
                                                                     ww7
                                                                     ww8
                                                                     ww9
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     GHC.Show.shows8
                                                                     (GHC.Base.++
                                                                        @ GHC.Types.Char
                                                                        Lib.$fShowBedRecord3
                                                                        x)) })))) of ww5 { (#,#) ww6 ww7 ->
                                               GHC.Types.:
                                                 @ GHC.Types.Char
                                                 ww6
                                                 ww7 }))) of ww5 { (#,#) ww6 ww7 ->
                                 GHC.Types.: @ GHC.Types.Char ww6 ww7 }))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char Lib.$fShowBedRecord2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Lib.$fShowBedRecord2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w))) }) -}
18dcc952c1108258dc05a48a35e58ce5
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 14,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,U>,
     Inline: [0] -}
33c0cdbf8224251d1e254cfc05339bff
  $w$ctoEnum :: GHC.Prim.Int# -> Lib.UChr
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Lib.$fEnumUChr1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 25#) of wild1 {
                        GHC.Types.False -> Lib.$fEnumUChr1 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ Lib.UChr ww } }) -}
4c1cc2dcb5809d33f7e5be56a582b261
  $w$sgo4 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c7b316af05bbf66d5c4e859339085bb2
  $waddprimerints ::
    Lib.CMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lib.AlignedRead
  {- Arity: 22, HasNoCafRefs,
     Strictness: <L,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Lib.CMap)
                   (ww :: Data.ByteString.Internal.ByteString)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (ww4 :: GHC.Integer.Type.Integer)
                   (ww5 :: GHC.Integer.Type.Integer)
                   (ww6 :: Data.ByteString.Internal.ByteString)
                   (ww7 :: Data.ByteString.Internal.ByteString)
                   (ww8 :: Lib.CigarMap)
                   (ww9 :: Data.ByteString.Internal.ByteString)
                   (ww10 :: GHC.Integer.Type.Integer)
                   (ww11 :: GHC.Integer.Type.Integer)
                   (ww12 :: Data.ByteString.Internal.ByteString)
                   (ww13 :: Data.ByteString.Internal.ByteString)
                   (ww14 :: Data.ByteString.Internal.ByteString)
                   (ww15 :: Data.ByteString.Internal.ByteString)
                   (ww16 :: GHC.Types.Bool)
                   (ww17 :: GHC.Types.Bool)
                   (ww18 :: GHC.Types.Bool)
                   (ww19 :: GHC.Integer.Type.Integer)
                   (ww20 :: GHC.Integer.Type.Integer) ->
                 let {
                   bedmap :: [Data.IntMap.Base.IntMap Lib.BedRecord]
                   = Data.Maybe.catMaybes1
                       @ (Data.IntMap.Base.IntMap Lib.BedRecord)
                       (GHC.Types.:
                          @ (GHC.Base.Maybe (Data.IntMap.Base.IntMap Lib.BedRecord))
                          (Lib.$slookup1 @ (Data.IntMap.Base.IntMap Lib.BedRecord) ww2 w)
                          (GHC.Types.[]
                             @ (GHC.Base.Maybe (Data.IntMap.Base.IntMap Lib.BedRecord))))
                 } in
                 let {
                   starthits :: [Lib.BedRecord]
                   = Data.Maybe.catMaybes1
                       @ Lib.BedRecord
                       (GHC.Base.map
                          @ (Data.IntMap.Base.IntMap Lib.BedRecord)
                          @ (GHC.Base.Maybe Lib.BedRecord)
                          (\ (bmap :: Data.IntMap.Base.IntMap Lib.BedRecord) ->
                           case GHC.Integer.Type.integerToInt ww3 of wild { DEFAULT ->
                           Data.IntMap.Base.$wlookup @ Lib.BedRecord wild bmap })
                          bedmap)
                 } in
                 let {
                   endhits :: [Lib.BedRecord]
                   = Data.Maybe.catMaybes1
                       @ Lib.BedRecord
                       (GHC.Base.map
                          @ (Data.IntMap.Base.IntMap Lib.BedRecord)
                          @ (GHC.Base.Maybe Lib.BedRecord)
                          (\ (bmap :: Data.IntMap.Base.IntMap Lib.BedRecord) ->
                           case GHC.Integer.Type.integerToInt ww4 of wild { DEFAULT ->
                           Data.IntMap.Base.$wlookup @ Lib.BedRecord wild bmap })
                          bedmap)
                 } in
                 Lib.AlignedRead
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   starthits
                   endhits
                   (case GHC.List.$wlenAcc
                           @ Lib.BedRecord
                           (Data.OldList.sortBy
                              @ Lib.BedRecord
                              Lib.$fOrdBedRecord_$ccompare
                              (GHC.Base.++ @ Lib.BedRecord starthits endhits))
                           0# of ww21 { DEFAULT ->
                    GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># ww21 0#) })
                   ww18
                   ww19
                   ww20) -}
965bcb8bc10cb03eac1012a2cf6c1bcc
  $walnp ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Lib.AlignedRead
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <S,U><L,U><S,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
ba1a6c1e4ae81eb1786d6bd1c14ec85e
  $wbedint ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 6, Strictness: <S,1*U><L,U><L,U><S,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Lib.UChr)
                   (ww4 :: GHC.Integer.Type.Integer)
                   (ww5 :: GHC.Integer.Type.Integer) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Lib.UChr ww)
                           (GHC.Prim.dataToTag# @ Lib.UChr ww3)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Lib.intvlint ww1 ww4 ww5 of wild1 {
                        GHC.Types.False -> Lib.intvlint ww2 ww4 ww5
                        GHC.Types.True -> GHC.Types.True } }) -}
79fa494477ec310268e3633f7bb0c082
  $wbedp ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Lib.BedRecord
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
9791e591cf80b8612ad6c840e48379aa
  $wcheckcigseqlen ::
    Data.ByteString.Internal.ByteString
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 5, Strictness: <L,1*U(U,U,U,U)><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.ByteString.Internal.ByteString)
                   (ww1 :: GHC.Prim.Addr#)
                   (ww2 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case GHC.Integer.Type.eqInteger#
                        (Lib.checkcigseqlen_go (Lib.mapcig ww) Lib.checkcigseqlen1)
                        (Lib.checkcigseqlen_gl
                           (Data.ByteString.Internal.$wunpackAppendCharsLazy
                              ww1
                              ww2
                              ww3
                              ww4
                              (GHC.Types.[] @ GHC.Types.Char))
                           Data.OldList.genericLength1) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
7e19e7a1a041f1b9e05da113be9fd36a
  $wcheckcigseqlen2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><S,U><L,1*U(U,U,U,U)><L,1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: Data.ByteString.Internal.ByteString)
                   (ww5 :: Data.ByteString.Internal.ByteString) ->
                 case Lib.checkcigseqlen3 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case ww5 of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                     let {
                       tcmap :: Lib.CigarMap = Lib.mapcig ww4
                     } in
                     case GHC.Integer.Type.eqInteger#
                            (Lib.checkcigseqlen2_go1 tcmap Lib.checkcigseqlen1)
                            (Lib.checkcigseqlen2_gl
                               (Data.ByteString.Internal.$wunpackAppendCharsLazy
                                  ww7
                                  ww8
                                  ww9
                                  ww10
                                  (GHC.Types.[] @ GHC.Types.Char))
                               Data.OldList.genericLength1) of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild2 {
                       GHC.Types.False -> GHC.Types.False
                       GHC.Types.True
                       -> case GHC.Integer.Type.gtInteger#
                                 (Lib.checkcigseqlen2_go tcmap Lib.checkcigseqlen1)
                                 Lib.checkcigseqlen1 of wild3 { DEFAULT ->
                          GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> $j GHC.Prim.void# GHC.Types.EQ -> GHC.Types.True }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> $j GHC.Prim.void# GHC.Types.EQ -> GHC.Types.True }
                             GHC.Types.True -> GHC.Types.True } }
                   GHC.Types.True -> $j GHC.Prim.void# } }) -}
82cb9727b6ea35cbcdf1412007f5728b
  $wcigarP ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <S,U><L,U><S,U><S,U><S,U><S,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (w :: Data.Attoparsec.Internal.Types.More)
                   (w1 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w2 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                            r) ->
                 Lib.$weta
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   w
                   w1
                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                      (pos' :: Data.Attoparsec.Internal.Types.Pos)[OneShot]
                      (more' :: Data.Attoparsec.Internal.Types.More)[OneShot]
                      (a1 :: (GHC.Integer.Type.Integer,
                              Data.ByteString.Internal.ByteString))[OneShot] ->
                    case t'
                           `cast`
                         (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww7 { Data.Attoparsec.ByteString.Buffer.Buf ww8 ww9 ww10 ww11 ww12 ww13 ->
                    case pos'
                           `cast`
                         (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww14 { GHC.Types.I# ww15 ->
                    Lib.$wmany_v1
                      @ r
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12
                      ww13
                      ww15
                      more'
                      (\ (t'1 :: Data.Attoparsec.Internal.Types.State
                                   Data.ByteString.Internal.ByteString)
                         (pos'1 :: Data.Attoparsec.Internal.Types.Pos)[OneShot]
                         (more'1 :: Data.Attoparsec.Internal.Types.More)[OneShot]
                         (a2 :: [(GHC.Integer.Type.Integer,
                                  Data.ByteString.Internal.ByteString)])[OneShot] ->
                       case pos'1
                              `cast`
                            (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt3 { GHC.Types.I# ipv3 ->
                       w2
                         t'1
                         nt3 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                         more'1
                         (GHC.Types.:
                            @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                            a1
                            a2) }) } })) -}
95614e179479d3883b0b913508966813
  $wcontractcigar ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
  {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.contractcigar4 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT
                             -> Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                                  (GHC.Base.map
                                     @ Data.ByteString.Internal.ByteString
                                     @ Data.ByteString.Internal.ByteString
                                     Lib.contractcigar2
                                     (Data.ByteString.$wgroup ww ww1 ww2 ww3))
                             GHC.Types.EQ -> Lib.contractcigar1 }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT
                                  -> Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                                       (GHC.Base.map
                                          @ Data.ByteString.Internal.ByteString
                                          @ Data.ByteString.Internal.ByteString
                                          Lib.contractcigar2
                                          (Data.ByteString.$wgroup ww ww1 ww2 ww3))
                                  GHC.Types.EQ -> Lib.contractcigar1 }
                             GHC.Types.True -> Lib.contractcigar1 } }
                   GHC.Types.True
                   -> Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                        (GHC.Base.map
                           @ Data.ByteString.Internal.ByteString
                           @ Data.ByteString.Internal.ByteString
                           Lib.contractcigar2
                           (Data.ByteString.$wgroup ww ww1 ww2 ww3)) } }) -}
b313fa022fd83d8f8770fa36fa7f8f82
  $weta ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <S,U><L,U><S,U><S,U><S,U><S,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
9f9c2349cdd2748f46251754c7630db9
  $wgetSlength2 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [(GHC.Integer.Type.Integer,
                           Data.ByteString.Internal.ByteString)]) ->
                 case Lib.$wgo6 w 0# of ww { DEFAULT ->
                 case Lib.$wgo5 w 0# of ww1 { DEFAULT ->
                 case Lib.$wgo4 w 0# of ww2 { DEFAULT ->
                 GHC.Prim.+# (GHC.Prim.+# ww (GHC.Prim.*# 2# ww1)) ww2 } } }) -}
70f429ea723f5e148dd293c80a5d5a07
  $wgetcol ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Vector.Vector a)
    -> Data.Vector.Vector a
  {- Arity: 4, Strictness: <L,U(U)><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Data.Vector.Vector a)) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector a)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ a
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised @ a)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         letrec {
                           $wfoldlM'_loop :: GHC.Types.SPEC
                                             -> GHC.Prim.Int#
                                             -> GHC.Prim.Int#
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Int #)
                             {- Arity: 4, Strictness: <S,1*U><L,U><S,U><S,U>, Inline: [0] -}
                           = \ (w1 :: GHC.Types.SPEC)
                               (ww3 :: GHC.Prim.Int#)
                               (ww4 :: GHC.Prim.Int#)
                               (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case w1 of ds5 { DEFAULT ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# ww4 ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ a
                                         ipv1
                                         ww3
                                         (case w of wild1 { GHC.Types.I# x ->
                                          case GHC.Prim.indexArray#
                                                 @ (Data.Vector.Vector a)
                                                 ww2
                                                 (GHC.Prim.+# ww ww4) of ds3 { Unit# ipv2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.>=# x 0#) of wild2 {
                                            GHC.Types.False
                                            -> case Data.Vector.Generic.length
                                                      @ Data.Vector.Vector
                                                      @ a
                                                      (Data.Vector.$fVectorVectora @ a)
                                                      ipv2 of wild3 { GHC.Types.I# n# ->
                                               Lib.getcol1 @ a n# x }
                                            GHC.Types.True
                                            -> case Data.Vector.Generic.length
                                                      @ Data.Vector.Vector
                                                      @ a
                                                      (Data.Vector.$fVectorVectora @ a)
                                                      ipv2 of wild3 { GHC.Types.I# y ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# x y) of wild4 {
                                                 GHC.Types.False -> Lib.getcol1 @ a y x
                                                 GHC.Types.True
                                                 -> case ipv2 of wild5 { Data.Vector.Vector dt dt1 dt2 ->
                                                    case GHC.Prim.indexArray#
                                                           @ a
                                                           dt2
                                                           (GHC.Prim.+# dt x) of ds4 { Unit# ipv3 ->
                                                    ipv3 } } } } } } })
                                         w2
                                           `cast`
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                  $wfoldlM'_loop
                                    GHC.Types.SPEC
                                    (GHC.Prim.+# ww3 1#)
                                    (GHC.Prim.+# ww4 1#)
                                    s'#
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R }
                               GHC.Types.True -> (# w2, GHC.Types.I# ww3 #) } }
                         } in
                         case $wfoldlM'_loop
                                GHC.Types.SPEC
                                0#
                                0#
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R of ds3 { (#,#) ipv6 ipv7 ->
                         case ipv7 of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ a
                                ipv1
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ a
                              0#
                              dt6
                              ipv3 #) } } } }) of ds2 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
429a7cdab3d8c5c1f114704a4f779db7
  $wgo ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
e310414ae567690a7f9ced5f333bff28
  $wgo1 ::
    GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: [0] -}
fff35bc2eb0cf0017f58e14f7f265923
  $wgo2 ::
    [Data.ByteString.Internal.ByteString]
    -> (# [Data.ByteString.Internal.ByteString],
          [Data.ByteString.Internal.ByteString] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
d5a708f02702a8a1e5d24e541330d8a7
  $wgo3 ::
    [Data.ByteString.Internal.ByteString]
    -> (# [Data.ByteString.Internal.ByteString],
          [Data.ByteString.Internal.ByteString] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
251e72dff356e5414ec717ae04a5c483
  $wgo4 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
b39c3d685630195d0ada92046f795a02
  $wgo5 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
e187a433893d4b508cbc43ea8e7171e5
  $wgo6 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
d20fd5ea8db68fc3836e42b3cafe3f9d
  $wgo7 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         ()
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 9,
     Strictness: <S,U><L,U><S,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
943b0afae034639f31742d344d6d1ea5
  $wgo8 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         ()
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 9,
     Strictness: <S,U><L,U><S,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
aecd869b937dc307878f45a02cbb0922
  $wix ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Array# a -> a
  {- Arity: 4, Strictness: <S,U><S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Array# a) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild1 {
                   GHC.Types.False
                   -> case Data.Vector.Generic.length
                             @ Data.Vector.Vector
                             @ a
                             (Data.Vector.$fVectorVectora @ a)
                             (Data.Vector.Vector @ a ww1 ww2 ww3) of wild2 { GHC.Types.I# n# ->
                      Lib.getcol1 @ a n# ww }
                   GHC.Types.True
                   -> case Data.Vector.Generic.length
                             @ Data.Vector.Vector
                             @ a
                             (Data.Vector.$fVectorVectora @ a)
                             (Data.Vector.Vector @ a ww1 ww2 ww3) of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ww y) of wild3 {
                        GHC.Types.False -> Lib.getcol1 @ a y ww
                        GHC.Types.True
                        -> case GHC.Prim.indexArray#
                                  @ a
                                  ww3
                                  (GHC.Prim.+# ww1 ww) of ds2 { Unit# ipv ->
                           ipv } } } }) -}
73c082be3dc7a718e8db08cbb06c6d49
  $wlvl ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
  {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww3 0#) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.ByteString.Internal.ByteString
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newPinnedByteArray#
                                     @ GHC.Prim.RealWorld
                                     1#
                                     eta of ds { (#,#) ipv2 ipv3 ->
                              let {
                                ipv4 :: GHC.Prim.Addr#
                                = GHC.Prim.byteArrayContents#
                                    ipv3
                                      `cast`
                                    (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                  GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ipv4
                                     0#
                                     (GHC.Prim.narrow8Word# ipv1)
                                     ipv2 of s2 { DEFAULT ->
                              let {
                                ipv5 :: GHC.ForeignPtr.ForeignPtrContents
                                = GHC.ForeignPtr.PlainPtr ipv3
                              } in
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.PtrRepLifted
                                     @ GHC.ForeignPtr.ForeignPtrContents
                                     ipv5
                                     s2 of s'1 { DEFAULT ->
                              (# s'1,
                                 Data.ByteString.Internal.PS
                                   ipv4
                                   ipv5
                                   0#
                                   1# #) } } }) of ds4 { (#,#) ipv2 ipv3 ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             ww3
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      let {
                        cs :: [GHC.Types.Char] = GHC.Types.: @ GHC.Types.Char ww5 ww6
                      } in
                      case GHC.List.$wlenAcc @ GHC.Types.Char cs 0# of ww7 { DEFAULT ->
                      case Data.ByteString.Internal.$wunsafePackLenChars
                             ww7
                             cs of ww8 { Data.ByteString.Internal.PS ww9 ww10 ww11 ww12 ->
                      case ipv3 of ww13 { Data.ByteString.Internal.PS ww14 ww15 ww16 ww17 ->
                      Data.ByteString.Internal.$w$c<>
                        ww9
                        ww10
                        ww11
                        ww12
                        ww14
                        ww15
                        ww16
                        ww17 } } } } } } }
                   GHC.Types.True
                   -> case Lib.contractcigar3
                      ret_ty Data.ByteString.Internal.ByteString
                      of {} }) -}
ec2df1db70f1d6e5222f5b4b55831fb0
  $wlvl1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.countDs2 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> GHC.Types.False GHC.Types.EQ -> GHC.Types.True }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> GHC.Types.False GHC.Types.EQ -> GHC.Types.True }
                             GHC.Types.True -> GHC.Types.True } }
                   GHC.Types.True -> GHC.Types.False } }) -}
22e6138a5342aed64fb220338b118577
  $wlvl2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case ww3 of ds2 {
                   DEFAULT
                   -> case Lib.$wgo1
                             (GHC.Prim.plusAddr# ww ww2)
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 ds2))
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      ipv1 } }
                   0# -> GHC.Types.False }) -}
b7884641a275e9f9bcc6f6a8d8effc19
  $wlvl3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.filtpadassoc2 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.True } }) -}
acf0bf1cd35ddaf33e16f3efd69b4cbe
  $wlvl4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.filtpadcmap2 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.True } }) -}
0aefd974f0b1610bd061216fcb2ee5ba
  $wlvl5 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.removeDs2 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.True } }) -}
27dde022c67a9f007de53692618b8bd1
  $wmakechrbedmap ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Lib.BedRecord
    -> Data.Map.Base.Map
         Lib.UChr (Data.IntMap.Base.IntMap Lib.BedRecord)
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# Lib.BedRecord) ->
                 letrec {
                   $wgo27 :: GHC.Prim.Int# -> [Lib.BedRecord]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww3 ww1) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ Lib.BedRecord
                                 ww2
                                 (GHC.Prim.+# ww ww3) of ds2 { Unit# ipv ->
                          GHC.Types.: @ Lib.BedRecord ipv ($wgo27 (GHC.Prim.+# ww3 1#)) }
                       GHC.Types.True -> GHC.Types.[] @ Lib.BedRecord }
                 } in
                 let {
                   bbychr :: [[Lib.BedRecord]]
                   = Data.OldList.groupBy
                       @ Lib.BedRecord
                       Lib.makechrbedmap1
                       ($wgo27 0#)
                 } in
                 Lib.$sfromList2
                   @ (Data.IntMap.Base.IntMap Lib.BedRecord)
                   (Lib.makechrbedmap_go
                      bbychr
                      (GHC.Base.map
                         @ [Lib.BedRecord]
                         @ (Data.IntMap.Base.IntMap Lib.BedRecord)
                         Lib.makebedmap2
                         bbychr))) -}
18cdc2f56e6958b06f7c1b7fb015795b
  $wmakeprimertups ::
    Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> [(GHC.Types.Int, Lib.BedRecord)]
  {- Arity: 4, Strictness: <L,U><S,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Lib.UChr)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Data.ByteString.Internal.ByteString) ->
                 let {
                   pe :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.plusInteger ww2 Lib.intvlint1
                 } in
                 let {
                   ps :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger ww1 Lib.intvlint1
                 } in
                 letrec {
                   go6 :: GHC.Integer.Type.Integer
                          -> [Lib.BedRecord] -> [(GHC.Types.Int, Lib.BedRecord)]
                     {- Arity: 2, Strictness: <S,U><L,1*U> -}
                   = \ (x :: GHC.Integer.Type.Integer) (eta :: [Lib.BedRecord]) ->
                     case GHC.Integer.Type.gtInteger# x pe of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> case eta of wild2 {
                            [] -> GHC.Types.[] @ (GHC.Types.Int, Lib.BedRecord)
                            : y ys
                            -> GHC.Types.:
                                 @ (GHC.Types.Int, Lib.BedRecord)
                                 (case GHC.Integer.Type.integerToInt x of wild3 { DEFAULT ->
                                  GHC.Types.I# wild3 },
                                  y)
                                 (go6 (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1) ys) }
                       GHC.Types.True -> GHC.Types.[] @ (GHC.Types.Int, Lib.BedRecord) } }
                 } in
                 go6
                   ps
                   (case GHC.Integer.Type.integerToInt
                           (GHC.Integer.Type.plusInteger
                              (GHC.Integer.Type.minusInteger pe ps)
                              Lib.expandcigar1) of wild { DEFAULT ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# wild) of wild1 {
                      GHC.Types.False -> GHC.Types.[] @ Lib.BedRecord
                      GHC.Types.True
                      -> let {
                           b :: Lib.BedRecord = Lib.BedRecord ww ww1 ww2 ww3
                         } in
                         let {
                           lvl133 :: [Lib.BedRecord]
                           = GHC.Types.: @ Lib.BedRecord b (GHC.Types.[] @ Lib.BedRecord)
                         } in
                         letrec {
                           $wxs :: GHC.Prim.Int# -> [Lib.BedRecord]
                             {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                           = \ (ww4 :: GHC.Prim.Int#) ->
                             case ww4 of ds2 {
                               DEFAULT
                               -> GHC.Types.: @ Lib.BedRecord b ($wxs (GHC.Prim.-# ds2 1#))
                               1# -> lvl133 }
                         } in
                         $wxs wild } })) -}
dec7100eb9d40093ce207327c5752629
  $wmany_v1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 9,
     Strictness: <S,U><L,U><S,U><S,U><S,U><S,U><S,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
fee4ba82d31d08208e64c6865ba07ebc
  $wnoclip ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.noclip2 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case Lib.noclip1 of wild2 { Data.ByteString.Internal.PS dt1 dt2 dt3 dt10 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim./=# ww3 dt10) of wild3 {
                       GHC.Types.False
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.eqAddr# ww dt1) of wild {
                            GHC.Types.False
                            -> case Data.ByteString.Internal.$wcompareBytes
                                      ww
                                      ww1
                                      ww2
                                      ww3
                                      dt1
                                      dt2
                                      dt3
                                      dt10 of wild4 {
                                 DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# ww2 dt3) of wild4 {
                                 GHC.Types.False
                                 -> case Data.ByteString.Internal.$wcompareBytes
                                           ww
                                           ww1
                                           ww2
                                           ww3
                                           dt1
                                           dt2
                                           dt3
                                           dt10 of wild5 {
                                      DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                                 GHC.Types.True -> GHC.Types.False } }
                       GHC.Types.True -> GHC.Types.True } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> $j GHC.Prim.void# GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> $j GHC.Prim.void# GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> $j GHC.Prim.void# } }) -}
61dd7754eb19ea5fe39ddddfe381e53d
  $wnohardclip ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.nohardclip1 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> GHC.Types.True } }) -}
60238fde48b32278fe89ff8e126198d1
  $wnopadding ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.nopadding2 of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case Lib.nopadding1 of wild2 { Data.ByteString.Internal.PS dt1 dt2 dt3 dt10 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim./=# ww3 dt10) of wild3 {
                       GHC.Types.False
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.eqAddr# ww dt1) of wild {
                            GHC.Types.False
                            -> case Data.ByteString.Internal.$wcompareBytes
                                      ww
                                      ww1
                                      ww2
                                      ww3
                                      dt1
                                      dt2
                                      dt3
                                      dt10 of wild4 {
                                 DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# ww2 dt3) of wild4 {
                                 GHC.Types.False
                                 -> case Data.ByteString.Internal.$wcompareBytes
                                           ww
                                           ww1
                                           ww2
                                           ww3
                                           dt1
                                           dt2
                                           dt3
                                           dt10 of wild5 {
                                      DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                                 GHC.Types.True -> GHC.Types.False } }
                       GHC.Types.True -> GHC.Types.True } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim./=# ww3 dt7) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr# ww dt4) of wild {
                        GHC.Types.False
                        -> case Data.ByteString.Internal.$wcompareBytes
                                  ww
                                  ww1
                                  ww2
                                  ww3
                                  dt4
                                  dt5
                                  dt6
                                  dt7 of wild4 {
                             DEFAULT -> $j GHC.Prim.void# GHC.Types.EQ -> GHC.Types.False }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 dt6) of wild3 {
                             GHC.Types.False
                             -> case Data.ByteString.Internal.$wcompareBytes
                                       ww
                                       ww1
                                       ww2
                                       ww3
                                       dt4
                                       dt5
                                       dt6
                                       dt7 of wild4 {
                                  DEFAULT -> $j GHC.Prim.void# GHC.Types.EQ -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True -> $j GHC.Prim.void# } }) -}
1c3fbf3cfd88c47ab8116231e063e369
  $woptasp ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
6c74201fccaf6553a0ac8bcdb6794d56
  $woptfieldp ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Data.Attoparsec.Internal.Types.More)
                   (w2 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w3 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 let {
                   pos1 :: GHC.Types.Int = GHC.Types.I# ww
                 } in
                 let {
                   lose :: Data.Attoparsec.Internal.Types.Failure
                             Data.ByteString.Internal.ByteString
                             (Data.Attoparsec.Internal.Types.State
                                Data.ByteString.Internal.ByteString)
                             r
                     {- Arity: 5, Strictness: <L,U><L,A><L,U><L,A><L,A>,
                        Unfolding: InlineRule (5, True, True)
                                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                                               Data.ByteString.Internal.ByteString)
                                      (_pos' :: Data.Attoparsec.Internal.Types.Pos)
                                      (more' :: Data.Attoparsec.Internal.Types.More)
                                      (_ctx :: [GHC.Base.String])
                                      (_msg :: GHC.Base.String) ->
                                    Lib.optfieldp2
                                      @ r
                                      t'
                                      pos1 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                                      more'
                                      w2
                                      w3) -}
                   = \ (t' :: Data.Attoparsec.Internal.Types.State
                                Data.ByteString.Internal.ByteString)
                       (_pos' :: Data.Attoparsec.Internal.Types.Pos)
                       (more' :: Data.Attoparsec.Internal.Types.More)
                       (_ctx :: [GHC.Base.String])
                       (_msg :: GHC.Base.String) ->
                     Lib.$woptxsp @ r t' ww more' w2 w3
                 } in
                 Lib.$woptnmp
                   @ r
                   w
                   ww
                   w1
                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                      (_pos' :: Data.Attoparsec.Internal.Types.Pos)
                      (more' :: Data.Attoparsec.Internal.Types.More)
                      (_ctx :: [GHC.Base.String])
                      (_msg :: GHC.Base.String) ->
                    Lib.$woptasp @ r t' ww more' lose w3)
                   w3) -}
5c61674b23b340ba45c3713ea8756963
  $woptidp ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Data.Attoparsec.Internal.Types.More)
                   (w2 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w3 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 let {
                   lvl133 :: GHC.Types.Int = GHC.Types.I# ww
                 } in
                 let {
                   lvl134 :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString
                             -> Data.Attoparsec.Internal.Types.Pos
                             -> Data.Attoparsec.Internal.Types.More
                             -> Data.ByteString.Internal.ByteString
                             -> Data.Attoparsec.Internal.Types.IResult
                                  Data.ByteString.Internal.ByteString r
                     {- Arity: 4 -}
                   = \ (t' :: Data.Attoparsec.Internal.Types.State
                                Data.ByteString.Internal.ByteString)
                       (pos' :: Data.Attoparsec.Internal.Types.Pos)
                       (more' :: Data.Attoparsec.Internal.Types.More)
                       (a1 :: Data.ByteString.Internal.ByteString) ->
                     case pos'
                            `cast`
                          (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt1 { GHC.Types.I# ipv1 ->
                     w3
                       t'
                       nt1 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                       more'
                       Lib.optidp10 }
                 } in
                 let {
                   lose :: Data.Attoparsec.Internal.Types.Failure
                             Data.ByteString.Internal.ByteString
                             (Data.Attoparsec.Internal.Types.State
                                Data.ByteString.Internal.ByteString)
                             r
                     {- Arity: 5, Strictness: <L,U><L,A><L,U><L,A><L,A>,
                        Unfolding: InlineRule (5, True, False)
                                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                                               Data.ByteString.Internal.ByteString)
                                      (_pos' :: Data.Attoparsec.Internal.Types.Pos)
                                      (more' :: Data.Attoparsec.Internal.Types.More)
                                      (_ctx :: [GHC.Base.String])
                                      (_msg :: GHC.Base.String) ->
                                    Lib.optidp8
                                      `cast`
                                    (Data.Attoparsec.Internal.Types.N:Parser[0]
                                         <Data.ByteString.Internal.ByteString>_N
                                         <Data.ByteString.Internal.ByteString>_R)
                                      @ r
                                      t'
                                      lvl133 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                                      more'
                                      w2
                                      (\ (t'1 :: Data.Attoparsec.Internal.Types.State
                                                   Data.ByteString.Internal.ByteString)
                                         (pos' :: Data.Attoparsec.Internal.Types.Pos)
                                         (more'1 :: Data.Attoparsec.Internal.Types.More)
                                         (a1 :: Data.ByteString.Internal.ByteString) ->
                                       case pos'
                                              `cast`
                                            (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt1 { GHC.Types.I# ipv1 ->
                                       w3
                                         t'1
                                         nt1 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                                         more'1
                                         Lib.optidp10 })) -}
                   = \ (t' :: Data.Attoparsec.Internal.Types.State
                                Data.ByteString.Internal.ByteString)
                       (_pos' :: Data.Attoparsec.Internal.Types.Pos)
                       (more' :: Data.Attoparsec.Internal.Types.More)
                       (_ctx :: [GHC.Base.String])
                       (_msg :: GHC.Base.String) ->
                     Lib.optidp8
                       `cast`
                     (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)
                       @ r
                       t'
                       lvl133 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                       more'
                       w2
                       lvl134
                 } in
                 let {
                   lvl135 :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString
                             -> Data.Attoparsec.Internal.Types.Pos
                             -> Data.Attoparsec.Internal.Types.More
                             -> Data.ByteString.Internal.ByteString
                             -> Data.Attoparsec.Internal.Types.IResult
                                  Data.ByteString.Internal.ByteString r
                     {- Arity: 4 -}
                   = \ (t' :: Data.Attoparsec.Internal.Types.State
                                Data.ByteString.Internal.ByteString)
                       (pos' :: Data.Attoparsec.Internal.Types.Pos)
                       (more' :: Data.Attoparsec.Internal.Types.More)
                       (a1 :: Data.ByteString.Internal.ByteString) ->
                     case pos'
                            `cast`
                          (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt1 { GHC.Types.I# ipv1 ->
                     w3
                       t'
                       nt1 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                       more'
                       Lib.optidp7 }
                 } in
                 Lib.optidp5
                   `cast`
                 (Data.Attoparsec.Internal.Types.N:Parser[0]
                      <Data.ByteString.Internal.ByteString>_N
                      <Data.ByteString.Internal.ByteString>_R)
                   @ r
                   w
                   lvl133 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                   w1
                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                      (_pos' :: Data.Attoparsec.Internal.Types.Pos)
                      (more' :: Data.Attoparsec.Internal.Types.More)
                      (_ctx :: [GHC.Base.String])
                      (_msg :: GHC.Base.String) ->
                    Lib.optidp3
                      `cast`
                    (Data.Attoparsec.Internal.Types.N:Parser[0]
                         <Data.ByteString.Internal.ByteString>_N
                         <Data.ByteString.Internal.ByteString>_R)
                      @ r
                      t'
                      lvl133 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                      more'
                      lose
                      lvl135)
                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                      (pos' :: Data.Attoparsec.Internal.Types.Pos)
                      (more' :: Data.Attoparsec.Internal.Types.More)
                      (a1 :: Data.ByteString.Internal.ByteString) ->
                    case pos'
                           `cast`
                         (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt1 { GHC.Types.I# ipv1 ->
                    w3
                      t'
                      nt1 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                      more'
                      Lib.optidp2 })) -}
dde1db3af2495dc1efc1ef7c8c6201a5
  $woptnmp ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
d9a3766e1373966c24ed4531e2c67b0f
  $woptxsp ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
cde08143a8d7c4be92388db65e426a60
  $wparseAln ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Either.Either GHC.Base.String Lib.AlignedRead
  {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.$walnp
                        @ Lib.AlignedRead
                        ww
                        ww1
                        ww2
                        ww3
                        ww3
                        0#
                        0#
                        Data.Attoparsec.Internal.Types.Complete
                        (Data.Attoparsec.ByteString.Internal.failK @ Lib.AlignedRead)
                          `cast`
                        (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                         ->_R <Data.Attoparsec.Internal.Types.Pos
                               -> Data.Attoparsec.Internal.Types.More
                               -> [GHC.Base.String]
                               -> GHC.Base.String
                               -> Data.Attoparsec.Internal.Types.IResult
                                    Data.ByteString.Internal.ByteString Lib.AlignedRead>_R)
                        (Data.Attoparsec.ByteString.Internal.successK @ Lib.AlignedRead)
                          `cast`
                        (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                         ->_R <Data.Attoparsec.Internal.Types.Pos
                               -> Data.Attoparsec.Internal.Types.More
                               -> Lib.AlignedRead
                               -> Data.Attoparsec.Internal.Types.IResult
                                    Data.ByteString.Internal.ByteString
                                    Lib.AlignedRead>_R) of wild {
                   Data.Attoparsec.Internal.Types.Fail ds ds2 err
                   -> case ds2 of wild1 {
                        [] -> Data.Either.Left @ GHC.Base.String @ Lib.AlignedRead err
                        : ipv ipv1
                        -> Data.Either.Left
                             @ [GHC.Types.Char]
                             @ Lib.AlignedRead
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   ipv
                                   (Data.OldList.prependToAll @ [GHC.Types.Char] Lib.mapcig2 ipv1))
                                (GHC.CString.unpackAppendCString# ": "# err)) }
                   Data.Attoparsec.Internal.Types.Partial ipv -> Lib.parseAln1
                   Data.Attoparsec.Internal.Types.Done ds a1
                   -> Data.Either.Right @ GHC.Base.String @ Lib.AlignedRead a1 }) -}
62e26cfa495f1b27f46fc6fcae3c9be9
  $wparseBED ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Either.Either GHC.Base.String Lib.BedRecord
  {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case Lib.$wbedp
                        @ Lib.BedRecord
                        ww
                        ww1
                        ww2
                        ww3
                        ww3
                        0#
                        0#
                        Data.Attoparsec.Internal.Types.Complete
                        (Data.Attoparsec.ByteString.Internal.failK @ Lib.BedRecord)
                          `cast`
                        (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                         ->_R <Data.Attoparsec.Internal.Types.Pos
                               -> Data.Attoparsec.Internal.Types.More
                               -> [GHC.Base.String]
                               -> GHC.Base.String
                               -> Data.Attoparsec.Internal.Types.IResult
                                    Data.ByteString.Internal.ByteString Lib.BedRecord>_R)
                        (Data.Attoparsec.ByteString.Internal.successK @ Lib.BedRecord)
                          `cast`
                        (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                         ->_R <Data.Attoparsec.Internal.Types.Pos
                               -> Data.Attoparsec.Internal.Types.More
                               -> Lib.BedRecord
                               -> Data.Attoparsec.Internal.Types.IResult
                                    Data.ByteString.Internal.ByteString Lib.BedRecord>_R) of wild {
                   Data.Attoparsec.Internal.Types.Fail ds ds2 err
                   -> case ds2 of wild1 {
                        [] -> Data.Either.Left @ GHC.Base.String @ Lib.BedRecord err
                        : ipv ipv1
                        -> Data.Either.Left
                             @ [GHC.Types.Char]
                             @ Lib.BedRecord
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   ipv
                                   (Data.OldList.prependToAll @ [GHC.Types.Char] Lib.mapcig2 ipv1))
                                (GHC.CString.unpackAppendCString# ": "# err)) }
                   Data.Attoparsec.Internal.Types.Partial ipv -> Lib.parseBED1
                   Data.Attoparsec.Internal.Types.Done ds a1
                   -> Data.Either.Right @ GHC.Base.String @ Lib.BedRecord a1 }) -}
3ea410035bd19dffb921f4718967e2a1
  $wparseCigar ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <S,U><L,U><S,U><S,U><S,U><S,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (w :: Data.Attoparsec.Internal.Types.More)
                   (w1 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w2 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                            r) ->
                 Lib.$wcigarP
                   @ r
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   w
                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                      (_pos' :: Data.Attoparsec.Internal.Types.Pos)[OneShot]
                      (more' :: Data.Attoparsec.Internal.Types.More)[OneShot]
                      (_ctx :: [GHC.Base.String])[OneShot]
                      (_msg :: GHC.Base.String)[OneShot] ->
                    case t'
                           `cast`
                         (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww7 { Data.Attoparsec.ByteString.Buffer.Buf ww8 ww9 ww10 ww11 ww12 ww13 ->
                    Lib.$wstarcigarP @ r ww8 ww9 ww10 ww11 ww12 ww13 ww6 more' w1 w2 })
                   w2) -}
a28baa50caff3a591045ace52416cd2c
  $wparsechkBED ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> [GHC.Types.Int] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [0] -}
bfbb635296003c3b2fe825c6bf5970c8
  $wparsechkSAM ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> [GHC.Types.Int] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [0] -}
3af794c136c1a10cea871ebd00bf57b1
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Lib.UChr a
    -> [(Lib.UChr, a)]
    -> Data.Map.Base.Map Lib.UChr a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
1b7b7b6710dbf993925daf4830d44f96
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
9aaf2f8a821353050e8d24fc707de7aa
  $wshiftcrds ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Integer.Type.Integer,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 5, Strictness: <L,1*U(1*U,A)><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
f97e8715813696a6167530dcdb5f85d9
  $wshowcigar ::
    GHC.Integer.Type.Integer
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.ByteString.Internal.ByteString
  {- Arity: 5, Strictness: <S,U><S,U><L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Prim.Addr#)
                   (ww2 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case GHC.Show.$w$cshowsPrec3
                        0#
                        ww
                        (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                 let {
                   cs :: [GHC.Types.Char] = GHC.Types.: @ GHC.Types.Char ww6 ww7
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char cs 0# of ww8 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww8
                        cs of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                 Data.ByteString.Internal.$w$c<>
                   ww10
                   ww11
                   ww12
                   ww13
                   ww1
                   ww2
                   ww3
                   ww4 } } }) -}
4800e31c3b3ca075d1a4769332f24a48
  $wspaces ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 8, Strictness: <S,U><L,U><S,U><S,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (w :: Data.Attoparsec.Internal.Types.More) ->
                 Lib.$wgo8 @ r ww ww1 ww2 ww3 ww4 ww5 ww6 w (Lib.spaces2 @ r)) -}
8efe86ed5321b8761d3ba6b78ee5671f
  $wstarcigarP ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
3d5f434fb95e4493a1dc9f73b6ac6467
  $wtrimalignment ::
    Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lib.AlignedRead
  {- Arity: 23,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
96d8bd5fbc397dc9a7aa624a3c3c82ba
  $wtrimboth ::
    Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> Lib.AlignedRead
  {- Arity: 20,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.ByteString.Internal.ByteString)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (ww4 :: GHC.Integer.Type.Integer)
                   (ww5 :: GHC.Integer.Type.Integer)
                   (ww6 :: Data.ByteString.Internal.ByteString)
                   (ww7 :: Lib.CigarMap)
                   (ww8 :: Data.ByteString.Internal.ByteString)
                   (ww9 :: GHC.Integer.Type.Integer)
                   (ww10 :: GHC.Integer.Type.Integer)
                   (ww11 :: Data.ByteString.Internal.ByteString)
                   (ww12 :: Data.ByteString.Internal.ByteString)
                   (ww13 :: Data.ByteString.Internal.ByteString)
                   (ww14 :: Data.ByteString.Internal.ByteString)
                   (ww15 :: GHC.Types.Bool)
                   (ww16 :: GHC.Types.Bool)
                   (ww17 :: [Lib.BedRecord])
                   (ww18 :: [Lib.BedRecord])
                   (ww19 :: GHC.Types.Bool) ->
                 let {
                   newendpos :: GHC.Integer.Type.Integer
                   = case ww18 of wild {
                       [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                       : x ds2
                       -> case x of wild1 { Lib.BedRecord ds ds3 ds4 ds5 -> ds3 } }
                 } in
                 let {
                   rdiff :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger ww4 newendpos
                 } in
                 let {
                   tendpos :: GHC.Integer.Type.Integer
                   = case GHC.Integer.Type.ltInteger#
                            rdiff
                            Lib.checkcigseqlen1 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False -> newendpos GHC.Types.True -> ww4 } }
                 } in
                 let {
                   newpos :: GHC.Integer.Type.Integer
                   = case ww17 of wild {
                       [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                       : x ds2
                       -> case x of wild1 { Lib.BedRecord ds ds3 ds4 ds5 -> ds4 } }
                 } in
                 let {
                   fdiff :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger newpos ww3
                 } in
                 let {
                   tpos :: GHC.Integer.Type.Integer
                   = case GHC.Integer.Type.ltInteger#
                            fdiff
                            Lib.checkcigseqlen1 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False -> newpos GHC.Types.True -> ww3 } }
                 } in
                 Lib.AlignedRead
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   (Lib.updateCigB fdiff rdiff ww6)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   (case GHC.Integer.Type.neqInteger# ww3 tpos of wild { DEFAULT ->
                    case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                      GHC.Types.False -> GHC.Integer.Type.neqInteger ww4 tendpos
                      GHC.Types.True -> GHC.Types.True } })
                   tpos
                   tendpos) -}
83a9676bccd7e718883ffde6b0e9739c
  $wtrimfwd ::
    Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> Lib.AlignedRead
  {- Arity: 21,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.ByteString.Internal.ByteString)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (ww4 :: GHC.Integer.Type.Integer)
                   (ww5 :: GHC.Integer.Type.Integer)
                   (ww6 :: Data.ByteString.Internal.ByteString)
                   (ww7 :: Lib.CigarMap)
                   (ww8 :: Data.ByteString.Internal.ByteString)
                   (ww9 :: GHC.Integer.Type.Integer)
                   (ww10 :: GHC.Integer.Type.Integer)
                   (ww11 :: Data.ByteString.Internal.ByteString)
                   (ww12 :: Data.ByteString.Internal.ByteString)
                   (ww13 :: Data.ByteString.Internal.ByteString)
                   (ww14 :: Data.ByteString.Internal.ByteString)
                   (ww15 :: GHC.Types.Bool)
                   (ww16 :: GHC.Types.Bool)
                   (ww17 :: [Lib.BedRecord])
                   (ww18 :: [Lib.BedRecord])
                   (ww19 :: GHC.Types.Bool)
                   (ww20 :: GHC.Integer.Type.Integer) ->
                 let {
                   newpos :: GHC.Integer.Type.Integer
                   = case ww17 of wild {
                       [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                       : x ds2
                       -> case x of wild1 { Lib.BedRecord ds ds3 ds4 ds5 -> ds4 } }
                 } in
                 let {
                   fdiff :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger newpos ww3
                 } in
                 let {
                   tpos :: GHC.Integer.Type.Integer
                   = case GHC.Integer.Type.ltInteger#
                            fdiff
                            Lib.checkcigseqlen1 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False -> newpos GHC.Types.True -> ww3 } }
                 } in
                 Lib.AlignedRead
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   (Lib.updateCigF fdiff ww6)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   (GHC.Integer.Type.neqInteger ww3 tpos)
                   tpos
                   ww20) -}
8d605aa71a6e17af6848b2a44a849c2f
  $wtrimrev ::
    Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Lib.UChr
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Lib.CigarMap
    -> Data.ByteString.Internal.ByteString
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [Lib.BedRecord]
    -> [Lib.BedRecord]
    -> GHC.Types.Bool
    -> GHC.Integer.Type.Integer
    -> Lib.AlignedRead
  {- Arity: 21,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.ByteString.Internal.ByteString)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Lib.UChr)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (ww4 :: GHC.Integer.Type.Integer)
                   (ww5 :: GHC.Integer.Type.Integer)
                   (ww6 :: Data.ByteString.Internal.ByteString)
                   (ww7 :: Lib.CigarMap)
                   (ww8 :: Data.ByteString.Internal.ByteString)
                   (ww9 :: GHC.Integer.Type.Integer)
                   (ww10 :: GHC.Integer.Type.Integer)
                   (ww11 :: Data.ByteString.Internal.ByteString)
                   (ww12 :: Data.ByteString.Internal.ByteString)
                   (ww13 :: Data.ByteString.Internal.ByteString)
                   (ww14 :: Data.ByteString.Internal.ByteString)
                   (ww15 :: GHC.Types.Bool)
                   (ww16 :: GHC.Types.Bool)
                   (ww17 :: [Lib.BedRecord])
                   (ww18 :: [Lib.BedRecord])
                   (ww19 :: GHC.Types.Bool)
                   (ww20 :: GHC.Integer.Type.Integer) ->
                 let {
                   newendpos :: GHC.Integer.Type.Integer
                   = case ww18 of wild {
                       [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                       : x ds2
                       -> case x of wild1 { Lib.BedRecord ds ds3 ds4 ds5 -> ds3 } }
                 } in
                 let {
                   rdiff :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger ww4 newendpos
                 } in
                 let {
                   tendpos :: GHC.Integer.Type.Integer
                   = case GHC.Integer.Type.ltInteger#
                            rdiff
                            Lib.checkcigseqlen1 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False -> newendpos GHC.Types.True -> ww4 } }
                 } in
                 Lib.AlignedRead
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   (Lib.updateCigR rdiff ww6)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   (GHC.Integer.Type.neqInteger ww4 tendpos)
                   ww20
                   tendpos) -}
59c2a9ce43ca9531703059ae111ffe3e
  $wtxtfieldp ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 9,
     Strictness: <S,U><L,U><S,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
1ae2d74639edd40dedb9ebd7237578c2
  $wuchrp ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Lib.UChr
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><S,U><L,U><L,U><S,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
bc78473094d69907c30e9b2cc9a43b63
  data AlignedRead
    = AlignedRead {qname :: Data.ByteString.Internal.ByteString,
                   flag :: GHC.Types.Int,
                   rname :: Lib.UChr,
                   pos :: GHC.Integer.Type.Integer,
                   endpos :: GHC.Integer.Type.Integer,
                   mapqual :: GHC.Integer.Type.Integer,
                   cigar :: Data.ByteString.Internal.ByteString,
                   trimdcigar :: Data.ByteString.Internal.ByteString,
                   cigmap :: Lib.CigarMap,
                   rnext :: Data.ByteString.Internal.ByteString,
                   pnext :: GHC.Integer.Type.Integer,
                   tlen :: GHC.Integer.Type.Integer,
                   refseq :: Data.ByteString.Internal.ByteString,
                   basequal :: Data.ByteString.Internal.ByteString,
                   optfields :: Data.ByteString.Internal.ByteString,
                   strand :: Data.ByteString.Internal.ByteString,
                   paired :: GHC.Types.Bool,
                   mapped :: GHC.Types.Bool,
                   fint :: [Lib.BedRecord],
                   rint :: [Lib.BedRecord],
                   pintflag :: GHC.Types.Bool,
                   trimdflag :: GHC.Types.Bool,
                   trimdpos :: GHC.Integer.Type.Integer,
                   trimdendpos :: GHC.Integer.Type.Integer}
ed8ac3fa5dd000094c2456d2099dae85
  type Alignments = [Lib.AlignedRead]
69b6571e46dbfc5cd2e86ff98c498a4e
  type BED = Data.Vector.Vector Lib.BedRecord
4d026e2b01511ba7724983b289f8f6ef
  type BedMap = Data.IntMap.Base.IntMap Lib.BedRecord
8cf722275c7d20a6dc76732aa294b83f
  data BedRecord
    = BedRecord {bedchr :: Lib.UChr,
                 bedstart :: GHC.Integer.Type.Integer,
                 bedend :: GHC.Integer.Type.Integer,
                 bedname :: Data.ByteString.Internal.ByteString}
075c59104667ee654bf100c290647016
  type CMap = Data.Map.Base.Map Lib.UChr Lib.BedMap
22313a4be66b698c9bff85adf1036675
  type CigarMap =
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
7d7ac3fe8d6d6ff794eab3a5f9862e8f
  type Header = [Data.ByteString.Internal.ByteString]
26c293801fa4797ed679b5020792f071
  type SAM = (Lib.Header, Lib.Alignments)
b8957f6f02a8d5347a149e45b54b08f6
  data SAMFlag
    = SAMFlag {pairedRead :: GHC.Types.Bool,
               mateMapped :: GHC.Types.Bool,
               notMapped :: GHC.Types.Bool,
               pairNotMapped :: GHC.Types.Bool,
               queryPlus :: GHC.Types.Bool,
               mateNeg :: GHC.Types.Bool,
               fstInPair :: GHC.Types.Bool,
               sndInPair :: GHC.Types.Bool,
               notPrimary :: GHC.Types.Bool,
               failedQC :: GHC.Types.Bool,
               dupRead :: GHC.Types.Bool,
               intflag :: GHC.Types.Int}
33c0cdbf8224251d1e254cfc05339bff
  data UChr
    = Chr1
    | Chr2
    | Chr3
    | Chr4
    | Chr5
    | Chr6
    | Chr7
    | Chr8
    | Chr9
    | Chr10
    | Chr11
    | Chr12
    | Chr13
    | Chr14
    | Chr15
    | Chr16
    | Chr17
    | Chr18
    | Chr19
    | Chr20
    | Chr21
    | Chr22
    | ChrX
    | ChrY
    | ChrM
    | NONE
0661111e204c5180bc0ab9cc9f80f962
  addprimerints :: Lib.CMap -> Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,A,A,A,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.CMap) (w1 :: Lib.AlignedRead) ->
                 case w1 of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Lib.$waddprimerints
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww22
                   ww23
                   ww24 }) -}
5ceceeddbf581bc8db871cac0c8bf6f1
  adjustcrds ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cigs :: [(GHC.Integer.Type.Integer,
                              Data.ByteString.Internal.ByteString)]) ->
                 case cigs of wild {
                   []
                   -> GHC.Types.[]
                        @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                   : x xs
                   -> GHC.Types.:
                        @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                        x
                        (case GHC.List.$wscanlGo
                                @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                                @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                                @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                                @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                                Lib.shiftcrds
                                x
                                xs of ww { (#,#) ww1 ww2 ->
                         ww2 }) }) -}
bca2ba7829fa98d0cf21401a8fae6167
  alnp :: Data.Attoparsec.ByteString.Internal.Parser Lib.AlignedRead
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.alnp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N <Lib.AlignedRead>_R)) -}
f7571a5a29efc00cec50f377d422d617
  alnp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Lib.AlignedRead
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Lib.AlignedRead
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$walnp @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w3 w4 } }) -}
c49a3b9e2eaa74f019561fe174ed16f3
  basequal :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds15 }) -}
4978d6bd4082ba49d900802764beef26
  bedchr :: Lib.BedRecord -> Lib.UChr
  RecSel Left Lib.BedRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.BedRecord) ->
                 case ds of wild { Lib.BedRecord ds2 ds3 ds4 ds5 -> ds2 }) -}
d6b927ab0c12f19979a6546e92f9bca3
  bedend :: Lib.BedRecord -> GHC.Integer.Type.Integer
  RecSel Left Lib.BedRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.BedRecord) ->
                 case ds of wild { Lib.BedRecord ds2 ds3 ds4 ds5 -> ds4 }) -}
d441c7e347ece2db92567dd06760d257
  bedint :: Lib.AlignedRead -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(SLLL),1*U(1*U,U,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.AlignedRead) (w1 :: Lib.BedRecord) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case w1 of ww25 { Lib.BedRecord ww26 ww27 ww28 ww29 ->
                 Lib.$wbedint ww3 ww4 ww5 ww26 ww27 ww28 } }) -}
2a97d341d9bed199dc087dcb4dc049fa
  bedmaplookup ::
    GHC.Integer.Type.Integer
    -> Data.IntMap.Base.IntMap Lib.BedRecord
    -> GHC.Base.Maybe Lib.BedRecord
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (pos1 :: GHC.Integer.Type.Integer)
                   (bmap :: Data.IntMap.Base.IntMap Lib.BedRecord) ->
                 case GHC.Integer.Type.integerToInt pos1 of wild { DEFAULT ->
                 Data.IntMap.Base.$wlookup @ Lib.BedRecord wild bmap }) -}
1eb4dbc4a0d97c0a32c6ca8f53f66501
  bedname :: Lib.BedRecord -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.BedRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.BedRecord) ->
                 case ds of wild { Lib.BedRecord ds2 ds3 ds4 ds5 -> ds5 }) -}
8b57c5a107b0df0d6e0f5126f5a7de37
  bedp :: Data.Attoparsec.ByteString.Internal.Parser Lib.BedRecord
  {- Arity: 5,
     Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.bedp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N <Lib.BedRecord>_R)) -}
a86f956cd1b778d1cb435752c3e64511
  bedp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Lib.BedRecord
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Lib.BedRecord
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wbedp @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w3 w4 } }) -}
2608250a46aab1e4aeccdd3405a84124
  bedstart :: Lib.BedRecord -> GHC.Integer.Type.Integer
  RecSel Left Lib.BedRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.BedRecord) ->
                 case ds of wild { Lib.BedRecord ds2 ds3 ds4 ds5 -> ds3 }) -}
c6d27303a9459f2d9b209d92ebfa1133
  checkcigseqlen :: Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <S(LLLLLLLLLLLLS(SLSS)LLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case ww13 of ww25 { Data.ByteString.Internal.PS ww26 ww27 ww28 ww29 ->
                 Lib.$wcheckcigseqlen ww8 ww26 ww27 ww28 ww29 } }) -}
e973905585ad8093ba9e3899959522b4
  checkcigseqlen1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
b0420c3e0d381ec5466ea4ce6213b4bf
  checkcigseqlen2 :: Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <S(LLLLLLS(LLLS)LLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U(U,U,U,U),1*U(U,U,U,U),A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case ww7 of ww25 { Data.ByteString.Internal.PS ww26 ww27 ww28 ww29 ->
                 Lib.$wcheckcigseqlen2 ww26 ww27 ww28 ww29 ww8 ww13 } }) -}
c17ed3d3ddddacf448753090db83797c
  checkcigseqlen2_gl ::
    [GHC.Types.Char]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
58dc58d612a531090e8c6814aea84ed6
  checkcigseqlen2_go ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
b32bb2a7a25ebd50b8992b02eb79a4e7
  checkcigseqlen2_go1 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
116cad92da878147759e05639c62622f
  checkcigseqlen3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "*"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
d1474da5e6f4b3545076e900a83197f9
  checkcigseqlen_gl ::
    [GHC.Types.Char]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c6fb654b477ad9c3edf54d18d1d63fee
  checkcigseqlen_go ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
62c3870eabab7da98f13e572e2dce6d7
  checkpos :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (i :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        i
                        Lib.checkcigseqlen1 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> i GHC.Types.True -> Lib.checkcigseqlen1 } }) -}
0b5d7a1f111abd00bdbc755e943ffe2f
  cigar :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds8 }) -}
1b845cfa5776d59d0a8e6c59d9502b7a
  cigarP ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
  {- Arity: 5,
     Strictness: <S(SLSSSS),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.cigarP1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <[(GHC.Integer.Type.Integer,
                             Data.ByteString.Internal.ByteString)]>_R)) -}
c652523d5f1f71b9c5eccec3d1baef9f
  cigarP1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(SLSSSS),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wcigarP @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w3 w4 } }) -}
1e768da82bfa423bd827ee61484b488d
  cigmap :: Lib.AlignedRead -> Lib.CigarMap
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds10 }) -}
df0af12903dbb5c84a2837c420ff68dc
  contractcigar ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Lib.$wcontractcigar ww1 ww2 ww3 ww4 }) -}
e1799efaaa8a41299912799344e30856
  contractcigar1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "*"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b98ba46b40dcb4bb31b3e8dee75cb4f6
  contractcigar2 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Lib.$wlvl ww1 ww2 ww3 ww4 }) -}
38f6fc3c3e528e7732bf324e414711aa
  contractcigar3 :: GHC.Word.Word8
  {- Strictness: x -}
a531784007922f443e31f2282d83a570
  contractcigar4 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "*"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
190853074756ea819644c2417eb4a9d1
  countDs ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (cs :: [(GHC.Integer.Type.Integer,
                            Data.ByteString.Internal.ByteString)]) ->
                 Lib.countDs_gl
                   (GHC.List.filter
                      @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                      Lib.countDs1
                      cs)
                   Data.OldList.genericLength1) -}
430a08a828b1f4efca3cd8ab62aa6fca
  countDs1 ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wlvl1 ww4 ww5 ww6 ww7 } }) -}
c69f28b92df8b7f27904dd0f0dfb0e2e
  countDs2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "D"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
9e3769f2b3af1c952a761c7daa77e19c
  countDs_gl ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
6fe01dc787b0a66cf25dbc9e8eb29b68
  countTrimdDels ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [(GHC.Integer.Type.Integer,
                           Data.ByteString.Internal.ByteString)]) ->
                 case Lib.$wgo w 0# of ww { DEFAULT -> GHC.Types.I# ww }) -}
ced2b21ed9deaccf587a497cafe2fd9b
  defaultAlignment :: Lib.AlignedRead
  {- Unfolding: (Lib.AlignedRead
                   Lib.defaultAlignment7
                   Lib.defaultAlignment6
                   Lib.defaultAlignment5
                   Lib.checkcigseqlen1
                   Lib.checkcigseqlen1
                   Lib.checkcigseqlen1
                   Lib.defaultAlignment4
                   Lib.defaultAlignment3
                   Lib.defaultAlignment2
                   Lib.defaultAlignment1
                   Lib.checkcigseqlen1
                   Lib.checkcigseqlen1
                   Lib.defaultAlignment4
                   Lib.defaultAlignment4
                   Lib.defaultAlignment4
                   Lib.defaultAlignment4
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Types.[] @ Lib.BedRecord)
                   (GHC.Types.[] @ Lib.BedRecord)
                   GHC.Types.False
                   GHC.Types.False
                   Lib.checkcigseqlen1
                   Lib.checkcigseqlen1) -}
b2653df6a3dc15c63d5f65e3a8204c36
  defaultAlignment1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "*"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
046a5401ad2cacaf2c4db7eeb6bdca9c
  defaultAlignment2 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
  {- Strictness: x -}
50a14edb3bbc7157b04ae56f02ecd8c1
  defaultAlignment3 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "*"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
5fd58aeb7ee9bbaef954bee4d65e822e
  defaultAlignment4 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        0# of ww2 { DEFAULT ->
                 Data.ByteString.Internal.$wunsafePackLenChars
                   ww2
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
d2803c281d01defeecb80a9d964fda32
  defaultAlignment5 :: Lib.UChr
  {- Strictness: x -}
896c1f24364b9f3ee30c4edf0a9ce735
  defaultAlignment6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
34951f5716759b450a1da95629544480
  defaultAlignment7 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "NONE"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b93b07a3cf2ef78c5c5d5bd0972acd95
  defaultBed :: Lib.BedRecord
  {- Strictness: m,
     Unfolding: (Lib.BedRecord
                   Lib.ChrM
                   Lib.checkcigseqlen1
                   Lib.checkcigseqlen1
                   Lib.defaultBed1) -}
9bf9a6c570054bbeb09517d44e9e1c51
  defaultBed1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "DEFAULT"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
1d1a145dd473873cbc94f556995d5369
  dupRead :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds12 }) -}
ff0b99937d9e1eac95f10234736d5c6f
  endpos :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds6 }) -}
7f031ec456b77bf6958c597e6a6eeb43
  expandcigar :: Lib.CigarMap -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (cmap :: Lib.CigarMap) ->
                 Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                   (Lib.expandcigar_go cmap)) -}
830446e6b5c20cce1fccc62986db8311
  expandcigar1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2a8653ba93394ef469342e0cf54b7980
  expandcigar2 ::
    Lib.CigarMap
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (cmap :: Lib.CigarMap) ->
                 case Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                        (Lib.expandcigar_go
                           cmap) of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 let {
                   ops :: [Data.ByteString.Internal.ByteString]
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ Data.ByteString.Internal.ByteString
                       Data.ByteString.Char8.singleton
                       (Data.ByteString.Internal.$wunpackAppendCharsLazy
                          ww1
                          ww2
                          ww3
                          ww4
                          (GHC.Types.[] @ GHC.Types.Char))
                 } in
                 let {
                   lim :: GHC.Integer.Type.Integer
                   = Data.OldList.strictGenericLength
                       @ GHC.Integer.Type.Integer
                       @ Data.ByteString.Internal.ByteString
                       GHC.Num.$fNumInteger
                       ops
                 } in
                 letrec {
                   go6 :: GHC.Integer.Type.Integer
                          -> [Data.ByteString.Internal.ByteString]
                          -> [(GHC.Integer.Type.Integer,
                               Data.ByteString.Internal.ByteString)]
                     {- Arity: 2, Strictness: <S,U><L,1*U> -}
                   = \ (x :: GHC.Integer.Type.Integer)
                       (eta :: [Data.ByteString.Internal.ByteString]) ->
                     case GHC.Integer.Type.gtInteger# x lim of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> case eta of wild2 {
                            []
                            -> GHC.Types.[]
                                 @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                            : y ys
                            -> GHC.Types.:
                                 @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                                 (x, y)
                                 (go6 (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1) ys) }
                       GHC.Types.True
                       -> GHC.Types.[]
                            @ (GHC.Integer.Type.Integer,
                               Data.ByteString.Internal.ByteString) } }
                 } in
                 go6 Lib.expandcigar1 ops }) -}
cd1c66de28b240b98a47f75b12e217de
  expandcigar_go ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> [Data.ByteString.Internal.ByteString]
  {- Arity: 1, Strictness: <S,1*U> -}
a738575195f0a6d4f0d332e0702dce99
  exrights :: Data.Either.Either a1 a -> a
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (x :: Data.Either.Either a1 a) ->
                 case Data.Either.rights1
                        @ a1
                        @ a
                        (GHC.Types.:
                           @ (Data.Either.Either a1 a)
                           x
                           (GHC.Types.[] @ (Data.Either.Either a1 a))) of wild {
                   [] -> GHC.List.badHead @ a : x1 ds2 -> x1 }) -}
30a45dd4fe30f7c94b914662c27b89ef
  exrights2 :: [a] -> GHC.Base.Maybe a
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 case GHC.List.$wlenAcc @ a xs 0# of ww2 {
                   DEFAULT -> GHC.Base.Just @ a (GHC.List.head @ a xs)
                   0# -> GHC.Base.Nothing @ a }) -}
7d4baacb05a7af34f6a362289fcbdc2f
  failedQC :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds11 }) -}
91f5c5307921111477332164e100134f
  filtcigseqmatch :: Lib.Alignments -> Lib.Alignments
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (as :: Lib.Alignments) ->
                 GHC.Base.build
                   @ Lib.AlignedRead
                   (\ @ b
                      (c1 :: Lib.AlignedRead -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ Lib.AlignedRead
                      @ b
                      (GHC.List.filterFB @ Lib.AlignedRead @ b c1 Lib.checkcigseqlen)
                      n
                      as)) -}
e03cbd04bb887f9387c1c338a47c04ec
  filtcigseqmatch2 :: Lib.Alignments -> Lib.Alignments
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (as :: Lib.Alignments) ->
                 GHC.Base.build
                   @ Lib.AlignedRead
                   (\ @ b
                      (c1 :: Lib.AlignedRead -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ Lib.AlignedRead
                      @ b
                      (GHC.List.filterFB @ Lib.AlignedRead @ b c1 Lib.checkcigseqlen2)
                      n
                      as)) -}
f20aaff2cf82565f3db98336f42b17c9
  filtmatchrem :: Lib.Alignments -> Lib.Alignments
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (as :: Lib.Alignments) ->
                 GHC.Base.build
                   @ Lib.AlignedRead
                   (\ @ b
                      (c1 :: Lib.AlignedRead -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ Lib.AlignedRead
                      @ b
                      (GHC.List.filterFB @ Lib.AlignedRead @ b c1 Lib.filtmatchrem1)
                      n
                      as)) -}
21d45cbea6abc05f5c2957480e23057b
  filtmatchrem1 :: Lib.AlignedRead -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS(LLLS)LLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U(U,U,U,1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 case ww7 of ww25 { Data.ByteString.Internal.PS ww26 ww27 ww28 ww29 ->
                 Lib.$wlvl2 ww26 ww27 ww28 ww29 } }) -}
10d37456555c5177921f5b18d46a35c6
  filtpadassoc ::
    [(GHC.Types.Int, Data.ByteString.Internal.ByteString)]
    -> [(GHC.Types.Int, Data.ByteString.Internal.ByteString)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (asclist :: [(GHC.Types.Int,
                                 Data.ByteString.Internal.ByteString)]) ->
                 GHC.Base.build
                   @ (GHC.Types.Int, Data.ByteString.Internal.ByteString)
                   (\ @ b
                      (c1 :: (GHC.Types.Int, Data.ByteString.Internal.ByteString)
                             -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Types.Int, Data.ByteString.Internal.ByteString)
                      @ b
                      (GHC.List.filterFB
                         @ (GHC.Types.Int, Data.ByteString.Internal.ByteString)
                         @ b
                         c1
                         Lib.filtpadassoc1)
                      n
                      asclist)) -}
6b66f69a37ca683f9a109c2c89fc0c1a
  filtpadassoc1 ::
    (GHC.Types.Int, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wlvl3 ww4 ww5 ww6 ww7 } }) -}
7012ebe180d9430fbbe7c45d680adff2
  filtpadassoc2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "D"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b4595ecb035cf3e66a6b943039908307
  filtpadcmap :: Lib.CigarMap -> Lib.CigarMap
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cmap :: Lib.CigarMap) ->
                 GHC.Base.build
                   @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                   (\ @ b
                      (c1 :: (GHC.Integer.Type.Integer,
                              Data.ByteString.Internal.ByteString)
                             -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                      @ b
                      (GHC.List.filterFB
                         @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                         @ b
                         c1
                         Lib.filtpadcmap1)
                      n
                      cmap)) -}
e991f61e95c9ee3f0c975d3cb741432d
  filtpadcmap1 ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wlvl4 ww4 ww5 ww6 ww7 } }) -}
e870b4c20a32f5d2c3035be45aee6ca1
  filtpadcmap2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "D"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
1231fe265c7fe6f92e142851b3f84a12
  fint :: Lib.AlignedRead -> [Lib.BedRecord]
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds20 }) -}
c567b788538fed4a42ae01d1e71f5e70
  flag :: Lib.AlignedRead -> GHC.Types.Int
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds3 }) -}
7ad5e40af2e280f18c5641c145405778
  fstInPair :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds8 }) -}
d277d03d4da2f5460e76a8b04658838c
  getAlignedLength ::
    Data.ByteString.Internal.ByteString -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: (\ (cigcol :: Data.ByteString.Internal.ByteString) ->
                 case Data.Either.rights1
                        @ GHC.Base.String
                        @ [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                        (GHC.Types.:
                           @ (Data.Either.Either
                                GHC.Base.String
                                [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)])
                           (case cigcol of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                            case Lib.$wparseCigar
                                   @ [(GHC.Integer.Type.Integer,
                                       Data.ByteString.Internal.ByteString)]
                                   dt
                                   dt1
                                   dt2
                                   dt3
                                   dt3
                                   0#
                                   0#
                                   Data.Attoparsec.Internal.Types.Complete
                                   (Data.Attoparsec.ByteString.Internal.failK
                                      @ [(GHC.Integer.Type.Integer,
                                          Data.ByteString.Internal.ByteString)])
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> [GHC.Base.String]
                                          -> GHC.Base.String
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               [(GHC.Integer.Type.Integer,
                                                 Data.ByteString.Internal.ByteString)]>_R)
                                   (Data.Attoparsec.ByteString.Internal.successK
                                      @ [(GHC.Integer.Type.Integer,
                                          Data.ByteString.Internal.ByteString)])
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> [(GHC.Integer.Type.Integer,
                                               Data.ByteString.Internal.ByteString)]
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               [(GHC.Integer.Type.Integer,
                                                 Data.ByteString.Internal.ByteString)]>_R) of wild1 {
                              Data.Attoparsec.Internal.Types.Fail ds ds2 err
                              -> case ds2 of wild2 {
                                   []
                                   -> Data.Either.Left
                                        @ GHC.Base.String
                                        @ [(GHC.Integer.Type.Integer,
                                            Data.ByteString.Internal.ByteString)]
                                        err
                                   : ipv ipv1
                                   -> Data.Either.Left
                                        @ [GHC.Types.Char]
                                        @ [(GHC.Integer.Type.Integer,
                                            Data.ByteString.Internal.ByteString)]
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           (Data.OldList.intercalate_$spoly_go
                                              @ GHC.Types.Char
                                              ipv
                                              (Data.OldList.prependToAll
                                                 @ [GHC.Types.Char]
                                                 Lib.mapcig2
                                                 ipv1))
                                           (GHC.CString.unpackAppendCString# ": "# err)) }
                              Data.Attoparsec.Internal.Types.Partial ipv -> Lib.mapcig1
                              Data.Attoparsec.Internal.Types.Done ds a1
                              -> Data.Either.Right
                                   @ GHC.Base.String
                                   @ [(GHC.Integer.Type.Integer,
                                       Data.ByteString.Internal.ByteString)]
                                   a1 } })
                           (GHC.Types.[]
                              @ (Data.Either.Either
                                   GHC.Base.String
                                   [(GHC.Integer.Type.Integer,
                                     Data.ByteString.Internal.ByteString)]))) of wild {
                   [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                   : x ds2 -> Lib.sumMatches x }) -}
76f579668c15f48350e8d795f23947ff
  getBED ::
    GHC.IO.FilePath -> GHC.Types.IO (Data.Vector.Vector Lib.BedRecord)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getBED1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Vector.Vector Lib.BedRecord>_R)) -}
7b7f29005bcbc0d675a993b53b09f8e6
  getBED1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Lib.BedRecord #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Exception.Base.bracket1
                        @ GHC.IO.Handle.Types.Handle
                        @ ()
                        @ Data.ByteString.Internal.ByteString
                        (GHC.IO.Handle.FD.openBinaryFile1 fp GHC.IO.IOMode.ReadMode)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                        GHC.IO.Handle.hClose1
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        Data.ByteString.Char8.readFile2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        s of ds { (#,#) ipv ipv1 ->
                 let {
                   flines :: [Data.ByteString.Internal.ByteString]
                   = case ipv1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                     Data.ByteString.Char8.$wlines ww1 ww2 ww3 ww4 }
                 } in
                 let {
                   ds2 :: (Data.Map.Base.Map
                             GHC.Types.Int (Data.Either.Either GHC.Base.String Lib.BedRecord),
                           Data.Map.Base.Map
                             GHC.Types.Int (Data.Either.Either GHC.Base.String Lib.BedRecord))
                   = case Data.Map.Base.$wpoly_go2
                            @ (Data.Either.Either GHC.Base.String Lib.BedRecord)
                            @ GHC.Types.Int
                            Lib.getBED5
                            (Lib.$sfromList
                               @ (Data.Either.Either GHC.Base.String Lib.BedRecord)
                               (GHC.List.zip
                                  @ GHC.Types.Int
                                  @ (Data.Either.Either GHC.Base.String Lib.BedRecord)
                                  Lib.getBED4
                                  (GHC.Base.map
                                     @ Data.ByteString.Internal.ByteString
                                     @ (Data.Either.Either GHC.Base.String Lib.BedRecord)
                                     Lib.parseBED
                                     flines))) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   succs :: Data.Vector.Vector Lib.BedRecord
                   = case GHC.Magic.runRW#
                            @ 'GHC.Types.PtrRepLifted
                            @ (Data.Vector.Vector Lib.BedRecord)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ Lib.BedRecord
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    0#
                                    (Data.Vector.Mutable.uninitialised @ Lib.BedRecord)
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds3 { (#,#) ipv2 ipv3 ->
                             case ds2 of wild { (,) succm failm ->
                             case Lib.getBED3
                                    GHC.Types.SPEC
                                    ((Data.Vector.Mutable.MVector
                                        @ (Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                        @ Lib.BedRecord
                                        0#
                                        0#
                                        ipv3)
                                       `cast`
                                     (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                      (GHC.ST.ST
                                                                                         GHC.Prim.RealWorld)>_N <Lib.BedRecord>_N),
                                     Lib.defaultAlignment6)
                                    (Data.Either.rights1
                                       @ GHC.Base.String
                                       @ Lib.BedRecord
                                       (Lib.getBED_go10
                                          (GHC.Types.[]
                                             @ (Data.Either.Either GHC.Base.String Lib.BedRecord))
                                          succm))
                                    ipv2
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R of ds4 { (#,#) ipv6 ipv7 ->
                             case ipv7 of wild5 { (,) v' n ->
                             case v'
                                    `cast`
                                  (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                             (GHC.ST.ST
                                                                                GHC.Prim.RealWorld)>_N <Lib.BedRecord>_N) of wild1 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                             case n of dt5 { GHC.Types.I# dt6 ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Lib.BedRecord
                                    dt2
                                    ipv6
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds5 { (#,#) ipv4 ipv5 ->
                             (# ipv4
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector
                                  @ Lib.BedRecord
                                  dt
                                  dt6
                                  ipv5 #) } } } } } } }) of ds3 { (#,#) ipv2 ipv3 ->
                     ipv3 }
                 } in
                 let {
                   parsestatus :: GHC.Base.String
                   = case GHC.List.$wlenAcc
                            @ Data.ByteString.Internal.ByteString
                            flines
                            0# of ww2 { DEFAULT ->
                     case Data.Vector.Generic.length
                            @ Data.Vector.Vector
                            @ Lib.BedRecord
                            (Data.Vector.$fVectorVectora @ Lib.BedRecord)
                            succs of ww { GHC.Types.I# ww1 ->
                     Lib.$wparsechkBED
                       ww2
                       ww1
                       (case ds2 of wild { (,) succm failm ->
                        Data.Map.Base.keys
                          @ GHC.Types.Int
                          @ (Data.Either.Either GHC.Base.String Lib.BedRecord)
                          failm }) } }
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        parsestatus
                        GHC.Types.True
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case System.IO.writeFile1
                        Lib.getBED2
                        parsestatus
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 (# ipv4, succs #) } } }) -}
0bbf8fbd1fe68724eca02453d7608977
  getBED2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "primer_parsing.log"#) -}
b998b20b6c0585d56acbb8704f9bf542
  getBED3 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          Lib.BedRecord,
        GHC.Types.Int)
    -> [Lib.BedRecord]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             Lib.BedRecord,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
4b200eeac74f9c2e539a84cf00de6d32
  getBED4 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1# 9223372036854775807#) -}
8ef5956ba07b7f8c6dd709886f07e201
  getBED5 ::
    GHC.Types.Int
    -> Data.Either.Either GHC.Base.String Lib.BedRecord
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (x :: Data.Either.Either GHC.Base.String Lib.BedRecord)[OneShot] ->
                 Data.Either.isRight @ GHC.Base.String @ Lib.BedRecord x) -}
40426b0c82cc8336bb2ff952504af914
  getBED_go10 ::
    [Data.Either.Either GHC.Base.String Lib.BedRecord]
    -> Data.Map.Base.Map
         GHC.Types.Int (Data.Either.Either GHC.Base.String Lib.BedRecord)
    -> [Data.Either.Either GHC.Base.String Lib.BedRecord]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
970a9eae6063f1dbdcfdce1611d46579
  getNclips ::
    [Data.ByteString.Internal.ByteString]
    -> GHC.Types.Char -> [Data.ByteString.Internal.ByteString]
  {- Arity: 2, Strictness: <S,1*U><L,U(U)>,
     Unfolding: (\ (ciggrps :: [Data.ByteString.Internal.ByteString])
                   (cigchar :: GHC.Types.Char) ->
                 letrec {
                   $wgo27 :: GHC.Prim.Addr#
                             -> GHC.Prim.Addr#
                             -> GHC.Prim.Addr#
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.Ptr.Ptr GHC.Word.Word8 #)
                     {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Addr#)
                       (ww1 :: GHC.Prim.Addr#)
                       (ww2 :: GHC.Prim.Addr#)
                       (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.eqAddr# ww ww2) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 ww
                                 0#
                                 w of ds2 { (#,#) ipv ipv1 ->
                          case cigchar of wild2 { GHC.Types.C# y ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.eqChar#
                                    (GHC.Prim.chr# (GHC.Prim.word2Int# ipv1))
                                    y) of wild3 {
                            GHC.Types.False -> $wgo27 (GHC.Prim.plusAddr# ww 1#) ww1 ww2 ipv
                            GHC.Types.True
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      ww1
                                      0#
                                      ipv1
                                      ipv of s2 { DEFAULT ->
                               $wgo27
                                 (GHC.Prim.plusAddr# ww 1#)
                                 (GHC.Prim.plusAddr# ww1 1#)
                                 ww2
                                 s2 } } } }
                       GHC.Types.True -> (# w, GHC.Ptr.Ptr @ GHC.Word.Word8 ww1 #) }
                 } in
                 letrec {
                   go6 :: [Data.ByteString.Internal.ByteString]
                          -> [Data.ByteString.Internal.ByteString]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.ByteString.Internal.ByteString]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Data.ByteString.Internal.ByteString
                       : y ys
                       -> case y of wild1 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# dt3 0#) of wild2 {
                            GHC.Types.False
                            -> case GHC.Magic.runRW#
                                      @ 'GHC.Types.PtrRepLifted
                                      @ Data.ByteString.Internal.ByteString
                                      (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# dt3 0#) of wild3 {
                                         GHC.Types.False
                                         -> case GHC.Prim.newPinnedByteArray#
                                                   @ GHC.Prim.RealWorld
                                                   dt3
                                                   s' of ds2 { (#,#) ipv ipv1 ->
                                            let {
                                              ipv2 :: GHC.Prim.Addr#
                                              = GHC.Prim.byteArrayContents#
                                                  ipv1
                                                    `cast`
                                                  (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                                            } in
                                            case $wgo27
                                                   (GHC.Prim.plusAddr# dt dt2)
                                                   ipv2
                                                   (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 dt3))
                                                   ipv of ds3 { (#,#) ipv3 ipv4 ->
                                            case ipv4 of wild4 { GHC.Ptr.Ptr a1 ->
                                            case GHC.Prim.touch#
                                                   @ 'GHC.Types.PtrRepLifted
                                                   @ GHC.ForeignPtr.ForeignPtrContents
                                                   dt1
                                                   ipv3 of s'1 { DEFAULT ->
                                            let {
                                              ipv5 :: GHC.Prim.Int# = GHC.Prim.minusAddr# a1 ipv2
                                            } in
                                            let {
                                              ipv6 :: GHC.ForeignPtr.ForeignPtrContents
                                              = GHC.ForeignPtr.PlainPtr ipv1
                                            } in
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.>=# ipv5 dt3) of wild5 {
                                              GHC.Types.False
                                              -> case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<# ipv5 0#) of wild6 {
                                                   GHC.Types.False
                                                   -> case GHC.Prim.newPinnedByteArray#
                                                             @ GHC.Prim.RealWorld
                                                             ipv5
                                                             s'1 of ds4 { (#,#) ipv7 ipv8 ->
                                                      let {
                                                        ipv9 :: GHC.Prim.Addr#
                                                        = GHC.Prim.byteArrayContents#
                                                            ipv8
                                                              `cast`
                                                            (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                          GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                                                      } in
                                                      case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 memcpy GHC.Prim.Addr#
                                                                                                                       -> GHC.Prim.Addr#
                                                                                                                       -> GHC.Prim.Word#
                                                                                                                       -> GHC.Prim.State#
                                                                                                                            GHC.Prim.RealWorld
                                                                                                                       -> (# GHC.Prim.State#
                                                                                                                               GHC.Prim.RealWorld,
                                                                                                                             GHC.Prim.Addr# #)}
                                                             ipv9
                                                             ipv2
                                                             (GHC.Prim.int2Word# ipv5)
                                                             ipv7 of wild7 { (#,#) ds5 ds6 ->
                                                      let {
                                                        ipv10 :: GHC.ForeignPtr.ForeignPtrContents
                                                        = GHC.ForeignPtr.PlainPtr ipv8
                                                      } in
                                                      case GHC.Prim.touch#
                                                             @ 'GHC.Types.PtrRepLifted
                                                             @ GHC.ForeignPtr.ForeignPtrContents
                                                             ipv10
                                                             ds5 of s'2 { DEFAULT ->
                                                      case GHC.Prim.touch#
                                                             @ 'GHC.Types.PtrRepLifted
                                                             @ GHC.ForeignPtr.ForeignPtrContents
                                                             ipv6
                                                             s'2 of s'3 { DEFAULT ->
                                                      (# s'3,
                                                         Data.ByteString.Internal.PS
                                                           ipv9
                                                           ipv10
                                                           0#
                                                           ipv5 #) } } } }
                                                   GHC.Types.True
                                                   -> case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                                                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                Data.ByteString.Internal.ByteString #)
                                                      of {} }
                                              GHC.Types.True
                                              -> case GHC.Prim.touch#
                                                        @ 'GHC.Types.PtrRepLifted
                                                        @ GHC.ForeignPtr.ForeignPtrContents
                                                        ipv6
                                                        s'1 of s'2 { DEFAULT ->
                                                 (# s'2,
                                                    Data.ByteString.Internal.PS
                                                      ipv2
                                                      ipv6
                                                      0#
                                                      dt3 #) } } } } } }
                                         GHC.Types.True
                                         -> case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                      Data.ByteString.Internal.ByteString #)
                                            of {} } }) of ds2 { (#,#) ipv ipv1 ->
                               case ipv1 of wild3 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># dt7 0#) of wild4 {
                                 GHC.Types.False -> go6 ys
                                 GHC.Types.True
                                 -> GHC.Types.:
                                      @ Data.ByteString.Internal.ByteString
                                      wild3
                                      (go6 ys) } } }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># dt3 0#) of wild3 {
                                 GHC.Types.False -> go6 ys
                                 GHC.Types.True
                                 -> GHC.Types.:
                                      @ Data.ByteString.Internal.ByteString
                                      wild1
                                      (go6 ys) } } } }
                 } in
                 go6 ciggrps) -}
dbff7fcf8d648e89c53a8d194d5f75fc
  getSAM :: GHC.IO.FilePath -> GHC.Types.IO Lib.SAM
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getSAM1
                  `cast`
                (<GHC.IO.FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <Lib.SAM>_R)) -}
fa46c1dd43757513a2e24d5c33255b2b
  getSAM1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.SAM #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Exception.Base.bracket1
                        @ GHC.IO.Handle.Types.Handle
                        @ ()
                        @ Data.ByteString.Internal.ByteString
                        (GHC.IO.Handle.FD.openBinaryFile1 fp GHC.IO.IOMode.ReadMode)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                        GHC.IO.Handle.hClose1
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        Data.ByteString.Char8.readFile2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        s of ds { (#,#) ipv ipv1 ->
                 let {
                   ds2 :: ([Data.ByteString.Internal.ByteString],
                           [Data.ByteString.Internal.ByteString])
                   = case Lib.$wgo2
                            (Data.ByteString.Char8.lines ipv1) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   bdy :: [Data.ByteString.Internal.ByteString]
                   = case ds2 of wild { (,) hdr bdy1 -> bdy1 }
                 } in
                 let {
                   ds3 :: (Data.Map.Base.Map
                             GHC.Types.Int (Data.Either.Either GHC.Base.String Lib.AlignedRead),
                           Data.Map.Base.Map
                             GHC.Types.Int (Data.Either.Either GHC.Base.String Lib.AlignedRead))
                   = case Data.Map.Base.$wpoly_go2
                            @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                            @ GHC.Types.Int
                            Lib.getSAM4
                            (Lib.$sfromList
                               @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                               (GHC.List.zip
                                  @ GHC.Types.Int
                                  @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                                  Lib.getBED4
                                  (GHC.Base.map
                                     @ Data.ByteString.Internal.ByteString
                                     @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                                     Lib.parseAln
                                     bdy))) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   succs :: [Lib.AlignedRead]
                   = case ds3 of wild { (,) succm failm ->
                     Data.Either.rights1
                       @ GHC.Base.String
                       @ Lib.AlignedRead
                       (Lib.getSAM_go10
                          (GHC.Types.[]
                             @ (Data.Either.Either GHC.Base.String Lib.AlignedRead))
                          succm) }
                 } in
                 let {
                   parsestatus :: GHC.Base.String
                   = case GHC.List.$wlenAcc
                            @ Data.ByteString.Internal.ByteString
                            bdy
                            0# of ww2 { DEFAULT ->
                     case GHC.List.$wlenAcc
                            @ Lib.AlignedRead
                            succs
                            0# of ww1 { DEFAULT ->
                     Lib.$wparsechkSAM
                       ww2
                       ww1
                       (case ds3 of wild { (,) succm failm ->
                        Data.Map.Base.keys
                          @ GHC.Types.Int
                          @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                          failm }) } }
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        parsestatus
                        GHC.Types.True
                        ipv of ds4 { (#,#) ipv2 ipv3 ->
                 case System.IO.writeFile1
                        Lib.getSAM3
                        parsestatus
                        ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    (case ds2 of wild { (,) hdr bdy1 -> hdr }, succs) #) } } }) -}
63b2f914fad774461bd62f6c37a9c15b
  getSAM2 :: GHC.IO.FilePath -> GHC.Types.IO Lib.SAM
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getSAM5
                  `cast`
                (<GHC.IO.FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <Lib.SAM>_R)) -}
b2f48222fe5e4f24894653645f6578dc
  getSAM3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sam_parsing.log"#) -}
073f0d16ce6b5721eafbaf785087b4b7
  getSAM4 ::
    GHC.Types.Int
    -> Data.Either.Either GHC.Base.String Lib.AlignedRead
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (x :: Data.Either.Either
                           GHC.Base.String Lib.AlignedRead)[OneShot] ->
                 Data.Either.isRight @ GHC.Base.String @ Lib.AlignedRead x) -}
1f5a9a966468f2a8c35ded64452e4b64
  getSAM5 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.SAM #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Control.Exception.Base.bracket1
                        @ GHC.IO.Handle.Types.Handle
                        @ ()
                        @ Data.ByteString.Internal.ByteString
                        (GHC.IO.Handle.FD.openBinaryFile1 fp GHC.IO.IOMode.ReadMode)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                        GHC.IO.Handle.hClose1
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        Data.ByteString.Char8.readFile2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    let {
                      ds2 :: ([Data.ByteString.Internal.ByteString],
                              [Data.ByteString.Internal.ByteString])
                      = case Lib.$wgo3
                               (Data.ByteString.Char8.lines ipv1) of ww { (#,#) ww1 ww2 ->
                        (ww1, ww2) }
                    } in
                    (case ds2 of wild { (,) hdr bdytxt -> hdr },
                     case ds2 of wild { (,) hdr bdytxt ->
                     Data.Either.rights1
                       @ GHC.Base.String
                       @ Lib.AlignedRead
                       (GHC.Base.map
                          @ Data.ByteString.Internal.ByteString
                          @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                          Lib.getSAM6
                          bdytxt) }) #) }) -}
f1accdd29aa8b9fcd6e6391eeb11033f
  getSAM6 ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either GHC.Base.String Lib.AlignedRead
  {- Arity: 1,
     Unfolding: (Data.Attoparsec.ByteString.Internal.parseOnly
                   @ Lib.AlignedRead
                   Lib.alnp1
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N <Lib.AlignedRead>_R))) -}
6c83a32b863f6d6669472f994461bdea
  getSAM_go10 ::
    [Data.Either.Either GHC.Base.String Lib.AlignedRead]
    -> Data.Map.Base.Map
         GHC.Types.Int (Data.Either.Either GHC.Base.String Lib.AlignedRead)
    -> [Data.Either.Either GHC.Base.String Lib.AlignedRead]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
8feecc414f9b0fd4d4a213d6f022bf6a
  getSlength2 ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [(GHC.Integer.Type.Integer,
                           Data.ByteString.Internal.ByteString)]) ->
                 case Lib.$wgetSlength2 w of ww { DEFAULT -> GHC.Types.I# ww }) -}
62353c22a072fc64e845c218927b4d41
  getcol ::
    GHC.Types.Int
    -> Data.Vector.Vector (Data.Vector.Vector a)
    -> Data.Vector.Vector a
  {- Arity: 2, Strictness: <L,U(U)><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Vector.Vector (Data.Vector.Vector a)) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 Lib.$wgetcol @ a w ww1 ww2 ww3 }) -}
afd6d59ce35dc68f15e2a415f0feeb5a
  getcol1 :: GHC.Prim.Int# -> GHC.Prim.Int# -> a
  {- Arity: 2, Strictness: <L,U><L,U>x -}
f6dac3300f1835cff79402a9e72758e5
  getlengths ::
    GHC.Base.Functor f =>
    f Data.ByteString.Internal.ByteString -> f GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (seqs :: f Data.ByteString.Internal.ByteString) ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Data.ByteString.Internal.ByteString
                   @ GHC.Types.Int
                   Data.ByteString.length
                   seqs) -}
acb67d8355600cac93389b3dddfd9d54
  intflag :: Lib.SAMFlag -> GHC.Types.Int
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds13 }) -}
7d1082541fa63245d9b7a52c94097898
  intgr2int :: GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Num.$fNumInt_$cfromInteger -}
879055b323ef89ccafc0d9904083b523
  intvlint ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,1*U><L,1*U>,
     Unfolding: (\ (q :: GHC.Integer.Type.Integer)
                   (s :: GHC.Integer.Type.Integer)
                   (e :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.geInteger#
                        q
                        (GHC.Integer.Type.minusInteger
                           s
                           Lib.intvlint1) of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.leInteger#
                             q
                             (GHC.Integer.Type.plusInteger
                                e
                                Lib.intvlint1) of wild2 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 } } }) -}
5601a2edb1337de7a733fc408933611b
  intvlint1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
4ccace4459c808143c002e296455dd79
  itypep ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.itypep1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
69a83375fa6cc3d177f281a476d4349e
  itypep1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (t :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (pos1 :: Data.Attoparsec.Internal.Types.Pos)
                   (more :: Data.Attoparsec.Internal.Types.More)
                   (lose :: Data.Attoparsec.Internal.Types.Failure
                              Data.ByteString.Internal.ByteString
                              (Data.Attoparsec.Internal.Types.State
                                 Data.ByteString.Internal.ByteString)
                              r)
                   (succ :: Data.Attoparsec.Internal.Types.Success
                              Data.ByteString.Internal.ByteString
                              (Data.Attoparsec.Internal.Types.State
                                 Data.ByteString.Internal.ByteString)
                              Data.ByteString.Internal.ByteString
                              r) ->
                 case pos1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt { GHC.Types.I# ipv ->
                 Lib.itypep3
                   `cast`
                 (Data.Attoparsec.Internal.Types.N:Parser[0]
                      <Data.ByteString.Internal.ByteString>_N
                      <Data.ByteString.Internal.ByteString>_R)
                   @ r
                   t
                   nt `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                   more
                   lose
                   (\ (t' :: Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                      (pos' :: Data.Attoparsec.Internal.Types.Pos)
                      (more' :: Data.Attoparsec.Internal.Types.More)
                      (a1 :: Data.ByteString.Internal.ByteString) ->
                    case pos'
                           `cast`
                         (Data.Attoparsec.Internal.Types.N:Pos[0]) of nt1 { GHC.Types.I# ipv1 ->
                    succ
                      t'
                      nt1 `cast` (Sym (Data.Attoparsec.Internal.Types.N:Pos[0]))
                      more'
                      Lib.itypep2 }) }) -}
8858257eb349a321b6697018ec718e89
  itypep2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "i"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
d04b50aac520e0124e7dc0c79c36eab9
  itypep3 ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.Attoparsec.ByteString.Char8.$fIsStringParser_$cfromString
                   @ Data.ByteString.Internal.ByteString
                   (GHC.Types.Eq#
                      @ *
                      @ *
                      @ Data.ByteString.Internal.ByteString
                      @ Data.ByteString.Internal.ByteString
                      @~ <Data.ByteString.Internal.ByteString>_N)
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Data.ByteString.Internal.ByteString>_N <Data.ByteString.Internal.ByteString>_N)
                   Lib.itypep4) -}
25b7d075d95ba7ca6275a18ba87b3b43
  itypep4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i"#) -}
5a5ef4f4660c9d73f8368f9814995476
  ix :: GHC.Types.Int -> Data.Vector.Vector a -> a
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(SLS),U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: Data.Vector.Vector a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Data.Vector.Vector ww3 ww4 ww5 ->
                 Lib.$wix @ a ww1 ww3 ww4 ww5 } }) -}
6cd709fd5fa4aea45bd4acac76214f43
  justbedmaps :: [GHC.Base.Maybe Lib.BedRecord] -> [Lib.BedRecord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.Maybe.catMaybes @ Lib.BedRecord) -}
69ba2e73756879aad4d2a10c1ef43eb9
  justchrmaps ::
    [GHC.Base.Maybe (Data.IntMap.Base.IntMap Lib.BedRecord)]
    -> [Data.IntMap.Base.IntMap Lib.BedRecord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.Maybe.catMaybes @ (Data.IntMap.Base.IntMap Lib.BedRecord)) -}
9e3a7b44237779ae784a923f6c0d757b
  makebedmap ::
    [Lib.BedRecord] -> Data.IntMap.Base.IntMap Lib.BedRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (bs :: [Lib.BedRecord]) ->
                 Data.IntMap.Strict.fromList1
                   @ Lib.BedRecord
                   (Data.IntMap.Base.Nil @ Lib.BedRecord)
                   (Lib.makebedmap_go bs bs)) -}
79f08b43167c7f765fabc1a5a92607b3
  makebedmap2 ::
    [Lib.BedRecord] -> Data.IntMap.Base.IntMap Lib.BedRecord
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (bs :: [Lib.BedRecord]) ->
                 Data.IntMap.Strict.fromList1
                   @ Lib.BedRecord
                   (Data.IntMap.Base.Nil @ Lib.BedRecord)
                   (Lib.makebedmap2_go bs)) -}
5da4cb6699e5413d159523de805a3151
  makebedmap2_go ::
    [Lib.BedRecord] -> [(GHC.Types.Int, Lib.BedRecord)]
  {- Arity: 1, Strictness: <S,1*U> -}
6b45d8fec82a63791c425e8c8d3b6d34
  makebedmap_go ::
    [Lib.BedRecord]
    -> [Lib.BedRecord] -> [(GHC.Types.Int, Lib.BedRecord)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
c118196365daf8e2103e206d0994a365
  makechrbedmap ::
    Lib.BED
    -> Data.Map.Base.Map
         Lib.UChr (Data.IntMap.Base.IntMap Lib.BedRecord)
  {- Arity: 1, Strictness: <S(LSL),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.BED) ->
                 case w of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 Lib.$wmakechrbedmap ww1 ww2 ww3 }) -}
c7b315fb40a7e1cce4713b03e405be5f
  makechrbedmap1 :: Lib.BedRecord -> Lib.BedRecord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,A,A,A)><S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Lib.BedRecord) (y :: Lib.BedRecord) ->
                 case x of wild { Lib.BedRecord ds ds2 ds3 ds4 ->
                 case ds of x1 { DEFAULT ->
                 case y of wild1 { Lib.BedRecord ds5 ds6 ds7 ds8 ->
                 case ds5 of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Lib.UChr x1)
                      (GHC.Prim.dataToTag# @ Lib.UChr x2)) } } } }) -}
36d2e1d3d942e318e539ad074e135e98
  makechrbedmap_go ::
    [[Lib.BedRecord]]
    -> [Data.IntMap.Base.IntMap Lib.BedRecord]
    -> [(Lib.UChr, Data.IntMap.Base.IntMap Lib.BedRecord)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
3cf4822819b6f0a2e291400fa3bd6357
  makeprimertups :: Lib.BedRecord -> [(GHC.Types.Int, Lib.BedRecord)]
  {- Arity: 1, Strictness: <S(LSSL),U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.BedRecord) ->
                 case w of ww { Lib.BedRecord ww1 ww2 ww3 ww4 ->
                 Lib.$wmakeprimertups ww1 ww2 ww3 ww4 }) -}
9b6cb601d9fbbe52314e2753ced16caa
  mapcig :: Data.ByteString.Internal.ByteString -> Lib.CigarMap
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: (\ (cigstr :: Data.ByteString.Internal.ByteString) ->
                 case Data.Either.rights1
                        @ GHC.Base.String
                        @ [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                        (GHC.Types.:
                           @ (Data.Either.Either
                                GHC.Base.String
                                [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)])
                           (case cigstr of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                            case Lib.$wparseCigar
                                   @ [(GHC.Integer.Type.Integer,
                                       Data.ByteString.Internal.ByteString)]
                                   dt
                                   dt1
                                   dt2
                                   dt3
                                   dt3
                                   0#
                                   0#
                                   Data.Attoparsec.Internal.Types.Complete
                                   (Data.Attoparsec.ByteString.Internal.failK
                                      @ [(GHC.Integer.Type.Integer,
                                          Data.ByteString.Internal.ByteString)])
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> [GHC.Base.String]
                                          -> GHC.Base.String
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               [(GHC.Integer.Type.Integer,
                                                 Data.ByteString.Internal.ByteString)]>_R)
                                   (Data.Attoparsec.ByteString.Internal.successK
                                      @ [(GHC.Integer.Type.Integer,
                                          Data.ByteString.Internal.ByteString)])
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> [(GHC.Integer.Type.Integer,
                                               Data.ByteString.Internal.ByteString)]
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               [(GHC.Integer.Type.Integer,
                                                 Data.ByteString.Internal.ByteString)]>_R) of wild1 {
                              Data.Attoparsec.Internal.Types.Fail ds ds2 err
                              -> case ds2 of wild2 {
                                   []
                                   -> Data.Either.Left
                                        @ GHC.Base.String
                                        @ [(GHC.Integer.Type.Integer,
                                            Data.ByteString.Internal.ByteString)]
                                        err
                                   : ipv ipv1
                                   -> Data.Either.Left
                                        @ [GHC.Types.Char]
                                        @ [(GHC.Integer.Type.Integer,
                                            Data.ByteString.Internal.ByteString)]
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           (Data.OldList.intercalate_$spoly_go
                                              @ GHC.Types.Char
                                              ipv
                                              (Data.OldList.prependToAll
                                                 @ [GHC.Types.Char]
                                                 Lib.mapcig2
                                                 ipv1))
                                           (GHC.CString.unpackAppendCString# ": "# err)) }
                              Data.Attoparsec.Internal.Types.Partial ipv -> Lib.mapcig1
                              Data.Attoparsec.Internal.Types.Done ds a1
                              -> Data.Either.Right
                                   @ GHC.Base.String
                                   @ [(GHC.Integer.Type.Integer,
                                       Data.ByteString.Internal.ByteString)]
                                   a1 } })
                           (GHC.Types.[]
                              @ (Data.Either.Either
                                   GHC.Base.String
                                   [(GHC.Integer.Type.Integer,
                                     Data.ByteString.Internal.ByteString)]))) of wild {
                   []
                   -> GHC.List.badHead
                        @ [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                   : x ds2 -> x }) -}
2f56905b26cb184c07f03fe32f18a873
  mapcig1 ::
    Data.Either.Either
      GHC.Base.String
      [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
  {- Strictness: x -}
5b580d8c6d61c8717999589cc174fc31
  mapcig2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " > "#) -}
c3293c526d90a95f9cdf9da2489676ca
  mapfst :: GHC.Num.Num a => (a -> c) -> (a, b) -> (c, b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ c1
                   @ b
                   ($dNum :: GHC.Num.Num a)
                   (f :: a -> c1)
                   (ds :: (a, b)) ->
                 case ds of wild { (,) x y -> (f x, y) }) -}
5f6317522109f7ebc079cfab201284f0
  mapped :: Lib.AlignedRead -> GHC.Types.Bool
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds19 }) -}
f84e993337469e25f14deff6f1c57d7a
  mapqual :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds7 }) -}
2a489169405af449a09b857b1cf4647d
  mateMapped :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds3 }) -}
fd4be6fc91d571bc621ae95984bc7470
  mateNeg :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds7 }) -}
0ff8b3e906a0b4df658f658975d46458
  noclip ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wnoclip ww4 ww5 ww6 ww7 } }) -}
16c7327d8cb128759ee0fcb2d6701f16
  noclip1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "S"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b972a70360732f2e7155cbee34588587
  noclip2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "H"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
ccdb9c96cc1d838b7ee951a7eadf92a2
  nohardclip ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wnohardclip ww4 ww5 ww6 ww7 } }) -}
1302ed56700a2145060695a18388c6e0
  nohardclip1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "H"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
5f222d11812139424ec6ce17ed1b5d13
  nopadding ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wnopadding ww4 ww5 ww6 ww7 } }) -}
4e7c310c82b4b8d93e20d387807aa259
  nopadding1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "D"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b9f791369137bad3428adc5fe1061d84
  nopadding2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "H"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b539043874575606acadaf7094aeecaf
  notMapped :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds4 }) -}
1e880aa9f4888fed9b383b86d3d7afbf
  notPrimary :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds10 }) -}
88e3723c748b9c146c8ee213181c106b
  optasp ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optasp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
813756fc5c954360f4c5de867bce75be
  optasp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Lib.$woptasp @ r w ww1 w2 w3 w4 }) -}
2766d0351f3c3d48a9a19b2429a4c6ee
  optfieldp ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <L,U><S,U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optfieldp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
74db48dc168e31d8925b478dae8da276
  optfieldp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S,U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Lib.$woptfieldp @ r w ww1 w2 w3 w4 }) -}
0472bbb1c8ff08f577f6ba5d83a9971e
  optfieldp2 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Lib.$woptxsp @ r w ww1 w2 w3 w4 }) -}
8385e41da87788af7f0115a30b34d102
  optfields :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds16 }) -}
c554cffd612e184a3be1f345743d783e
  optfieldsp ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      [Data.ByteString.Internal.ByteString]
  {- Arity: 5,
     Strictness: <L,U><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optfieldsp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <[Data.ByteString.Internal.ByteString]>_R)) -}
6c050c3d5a403965b6178f3cad9b7a8c
  optfieldsp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [Data.ByteString.Internal.ByteString]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w2 :: Data.Attoparsec.Internal.Types.State
                            Data.ByteString.Internal.ByteString)
                   (w3 :: Data.Attoparsec.Internal.Types.Pos)
                   (w4 :: Data.Attoparsec.Internal.Types.More)
                   (w5 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w6 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [Data.ByteString.Internal.ByteString]
                            r) ->
                 case w3
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Data.Attoparsec.Combinator.$w$ssepBy'1
                   @ Data.ByteString.Internal.ByteString
                   @ GHC.Types.Char
                   Lib.optfieldp1
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N
                             <Data.ByteString.Internal.ByteString>_R))
                   Data.Attoparsec.ByteString.Char8.space
                   @ r
                   w2
                   ww1
                   w4
                   w6 }) -}
84a2ad25853777bd3bc2597ebea5eb31
  optfieldsp2 ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      [Data.ByteString.Internal.ByteString]
  {- Arity: 5,
     Strictness: <L,U><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optfieldsp3
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <[Data.ByteString.Internal.ByteString]>_R)) -}
ef9e8cb81926596b7526e27ae4790ac1
  optfieldsp3 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [Data.ByteString.Internal.ByteString]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w2 :: Data.Attoparsec.Internal.Types.State
                            Data.ByteString.Internal.ByteString)
                   (w3 :: Data.Attoparsec.Internal.Types.Pos)
                   (w4 :: Data.Attoparsec.Internal.Types.More)
                   (w5 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w6 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [Data.ByteString.Internal.ByteString]
                            r) ->
                 case w3
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Data.Attoparsec.Combinator.$w$ssepBy'1
                   @ Data.ByteString.Internal.ByteString
                   @ GHC.Types.Char
                   Lib.optfieldsp4
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N
                             <Data.ByteString.Internal.ByteString>_R))
                   Data.Attoparsec.ByteString.Char8.space
                   @ r
                   w2
                   ww1
                   w4
                   w6 }) -}
3f56eea9f4331cb9e05174e7c7424c7b
  optfieldsp4 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wtxtfieldp @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w4 } }) -}
1a7ef7a5e2619fe5e449e47072b09bb4
  optidp ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optidp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
f73a6c91cca684a1b78504f2f4a53ba2
  optidp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Lib.$woptidp @ r w ww1 w2 w3 w4 }) -}
059f433d9fab193e234ef2a2f701f1cb
  optidp10 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "XS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
adbba042d0f889c85c5d73efc7a8514f
  optidp2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "NM"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
0185135025c502d2738104223a069840
  optidp3 ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.Attoparsec.ByteString.Char8.$fIsStringParser_$cfromString
                   @ Data.ByteString.Internal.ByteString
                   (GHC.Types.Eq#
                      @ *
                      @ *
                      @ Data.ByteString.Internal.ByteString
                      @ Data.ByteString.Internal.ByteString
                      @~ <Data.ByteString.Internal.ByteString>_N)
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Data.ByteString.Internal.ByteString>_N <Data.ByteString.Internal.ByteString>_N)
                   Lib.optidp4) -}
7d215971915c098987143449e3d4fdfe
  optidp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AS"#) -}
23370d45843a677142346c6cbf1ffeb1
  optidp5 ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.Attoparsec.ByteString.Char8.$fIsStringParser_$cfromString
                   @ Data.ByteString.Internal.ByteString
                   (GHC.Types.Eq#
                      @ *
                      @ *
                      @ Data.ByteString.Internal.ByteString
                      @ Data.ByteString.Internal.ByteString
                      @~ <Data.ByteString.Internal.ByteString>_N)
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Data.ByteString.Internal.ByteString>_N <Data.ByteString.Internal.ByteString>_N)
                   Lib.optidp6) -}
a3ba533778815b76de3c7dddcbe2fe2f
  optidp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NM"#) -}
c34379ae39147d23f972fab3b40f5ac9
  optidp7 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "AS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
e5bb005863ec68b10c7f406da6a83148
  optidp8 ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.Attoparsec.ByteString.Char8.$fIsStringParser_$cfromString
                   @ Data.ByteString.Internal.ByteString
                   (GHC.Types.Eq#
                      @ *
                      @ *
                      @ Data.ByteString.Internal.ByteString
                      @ Data.ByteString.Internal.ByteString
                      @~ <Data.ByteString.Internal.ByteString>_N)
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Data.ByteString.Internal.ByteString>_N <Data.ByteString.Internal.ByteString>_N)
                   Lib.optidp9) -}
c8bbeec8cfb71f769c9cba89d8408449
  optidp9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XS"#) -}
b72fe20f8c456bcca4f9404a90fbb014
  optnmp ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optnmp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
128cb9b0e40eae71cbf5f95659bf1c56
  optnmp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Data.ByteString.Internal.ByteString
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Data.ByteString.Internal.ByteString
                            r) ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Lib.$woptnmp @ r w ww1 w2 w3 w4 }) -}
494fe5810fb899f7a8ed6b17ba6d4b07
  optxsp ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <L,U><S,1*U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optfieldp2
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
51104940d3e8cd9283a9f5248db9152e
  pairNotMapped :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds5 }) -}
bffc8d66a72653c8bd2a729a59f36e9d
  paired :: Lib.AlignedRead -> GHC.Types.Bool
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds18 }) -}
140147853807fd67052b0ab232f24896
  pairedRead :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds2 }) -}
ceea6d8807a9c37c74426e06f6c61f5e
  parseAln ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either GHC.Base.String Lib.AlignedRead
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Lib.$wparseAln ww1 ww2 ww3 ww4 }) -}
15e30b3279c355dcfb48ca1062aa0ed0
  parseAln1 :: Data.Either.Either GHC.Base.String Lib.AlignedRead
  {- Strictness: x -}
164f029fbdbeca55742ad9cbf7cb4d4f
  parseAlns ::
    [Data.ByteString.Internal.ByteString] -> Lib.Alignments
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (as :: [Data.ByteString.Internal.ByteString]) ->
                 Data.Either.rights1
                   @ GHC.Base.String
                   @ Lib.AlignedRead
                   (GHC.Base.build
                      @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                      (\ @ b1
                         (c1 :: Data.Either.Either GHC.Base.String Lib.AlignedRead
                                -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Data.ByteString.Internal.ByteString
                         @ b1
                         (GHC.Base.mapFB
                            @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                            @ b1
                            @ Data.ByteString.Internal.ByteString
                            c1
                            Lib.getSAM6)
                         n
                         as))) -}
f918f032999f2623c465d92d55b67ed7
  parseBED ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either GHC.Base.String Lib.BedRecord
  {- Arity: 1, Strictness: <S(SLSS),1*U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Lib.$wparseBED ww1 ww2 ww3 ww4 }) -}
c1b072e4a8cb6c25390eec7a2fb7f93a
  parseBED1 :: Data.Either.Either GHC.Base.String Lib.BedRecord
  {- Strictness: x -}
1f41ee973d5ae0354a3aeaedb536491f
  parseCigar ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Base.String
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
  {- Arity: 1,
     Unfolding: (Data.Attoparsec.ByteString.Internal.parseOnly
                   @ [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                   Lib.parseCigar1
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N
                             <[(GHC.Integer.Type.Integer,
                                Data.ByteString.Internal.ByteString)]>_R))) -}
2407dd194ba90fee4b157af8008ac335
  parseCigar1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(SLSSSS),1*U(U,U,U,U,U,U)><S(S),U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wparseCigar @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w3 w4 } }) -}
dbe04a3d1d50a0eb8f9ea6ec6c087d5b
  parseSAM :: [Data.ByteString.Internal.ByteString] -> Lib.SAM
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Data.ByteString.Internal.ByteString]) ->
                 let {
                   ds :: ([Data.ByteString.Internal.ByteString],
                          [Data.ByteString.Internal.ByteString])
                   = case Lib.$wgo3 w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                 } in
                 (case ds of wild { (,) hdr bdytxt -> hdr },
                  case ds of wild { (,) hdr bdytxt ->
                  Data.Either.rights1
                    @ GHC.Base.String
                    @ Lib.AlignedRead
                    (GHC.Base.map
                       @ Data.ByteString.Internal.ByteString
                       @ (Data.Either.Either GHC.Base.String Lib.AlignedRead)
                       Lib.getSAM6
                       bdytxt) })) -}
8939cfb7722470f25f643a78b313b22b
  parsechkBED ::
    GHC.Types.Int
    -> GHC.Types.Int -> [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Lib.$wparsechkBED ww1 ww3 w2 } }) -}
2bdf99109b45feeb3b72d02ed3a1a3fc
  parsechkSAM ::
    GHC.Types.Int
    -> GHC.Types.Int -> [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Lib.$wparsechkSAM ww1 ww3 w2 } }) -}
3008b55c57337d27e504da41024f3ce9
  parsedbl ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either GHC.Base.String GHC.Types.Double
  {- Arity: 1,
     Unfolding: (Data.Attoparsec.ByteString.Internal.parseOnly
                   @ GHC.Types.Double
                   Data.Attoparsec.ByteString.Char8.double1
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N <GHC.Types.Double>_R))) -}
5d5c683df8cc93342d67716399d389a2
  parseint ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either GHC.Base.String GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (Data.Attoparsec.ByteString.Internal.parseOnly
                   @ GHC.Integer.Type.Integer
                   Data.Attoparsec.ByteString.Char8.decimal6
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N
                             <GHC.Integer.Type.Integer>_R))) -}
84a14e5cb374927ff91386c8b2b61902
  parsesignedint ::
    Data.ByteString.Internal.ByteString -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: (\ (i :: Data.ByteString.Internal.ByteString) ->
                 case Data.Either.rights1
                        @ GHC.Base.String
                        @ GHC.Types.Double
                        (GHC.Types.:
                           @ (Data.Either.Either GHC.Base.String GHC.Types.Double)
                           (case i of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                            case Data.Attoparsec.ByteString.Char8.$wdouble
                                   @ GHC.Types.Double
                                   dt
                                   dt1
                                   dt2
                                   dt3
                                   dt3
                                   0#
                                   0#
                                   Data.Attoparsec.Internal.Types.Complete
                                   (Data.Attoparsec.ByteString.Internal.failK @ GHC.Types.Double)
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> [GHC.Base.String]
                                          -> GHC.Base.String
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               GHC.Types.Double>_R)
                                   (Data.Attoparsec.ByteString.Internal.successK @ GHC.Types.Double)
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> GHC.Types.Double
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               GHC.Types.Double>_R) of wild1 {
                              Data.Attoparsec.Internal.Types.Fail ds ds2 err
                              -> case ds2 of wild2 {
                                   [] -> Data.Either.Left @ GHC.Base.String @ GHC.Types.Double err
                                   : ipv ipv1
                                   -> Data.Either.Left
                                        @ [GHC.Types.Char]
                                        @ GHC.Types.Double
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           (Data.OldList.intercalate_$spoly_go
                                              @ GHC.Types.Char
                                              ipv
                                              (Data.OldList.prependToAll
                                                 @ [GHC.Types.Char]
                                                 Lib.mapcig2
                                                 ipv1))
                                           (GHC.CString.unpackAppendCString# ": "# err)) }
                              Data.Attoparsec.Internal.Types.Partial ipv -> Lib.parsesignedint2
                              Data.Attoparsec.Internal.Types.Done ds a1
                              -> Data.Either.Right @ GHC.Base.String @ GHC.Types.Double a1 } })
                           (GHC.Types.[]
                              @ (Data.Either.Either GHC.Base.String GHC.Types.Double))) of wild {
                   [] -> case GHC.List.badHead ret_ty GHC.Integer.Type.Integer of {}
                   : x ds2
                   -> case x of wild1 { GHC.Types.D# x1 ->
                      case GHC.Integer.Type.decodeDoubleInteger
                             x1 of ds3 { (#,#) ipv ipv1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ipv1 0#) of wild2 {
                        GHC.Types.False -> GHC.Integer.Type.shiftLInteger ipv ipv1
                        GHC.Types.True
                        -> let {
                             s :: GHC.Prim.Int# = GHC.Prim.negateInt# ipv1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># s 52#) of wild3 {
                             GHC.Types.False
                             -> case GHC.Integer.Type.integerToInt ipv of n { DEFAULT ->
                                GHC.Integer.Type.smallInteger (GHC.Prim.uncheckedIShiftRA# n s) }
                             GHC.Types.True
                             -> case GHC.Integer.Type.ltInteger#
                                       ipv
                                       Lib.checkcigseqlen1 of wild4 { DEFAULT ->
                                case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                                  GHC.Types.False -> Lib.checkcigseqlen1
                                  GHC.Types.True -> Lib.parsesignedint1 } } } } } } }) -}
b6b5072678ea634e95db5bc83108c0ab
  parsesignedint1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
f5742145ff9c907c49d15269d41b3823
  parsesignedint2 ::
    Data.Either.Either GHC.Base.String GHC.Types.Double
  {- Strictness: x -}
e502dad6e131f1aaac36bfccbcfbb560
  pintflag :: Lib.AlignedRead -> GHC.Types.Bool
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds22 }) -}
d7ba99bb71376a7bfb1c6be7ecd6a4da
  pnext :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds12 }) -}
c5c20ecba20a41eabe55108d89763272
  pos :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds5 }) -}
bc7890cf5a9f4f5f2cc685ca0af2ecb9
  printAlignment ::
    Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  {- Arity: 1,
     Strictness: <L,U(1*U,1*U(U),1*U,A,A,U,A,1*U,A,1*U,1*U,U,1*U,1*U,1*U,A,A,A,A,A,A,A,1*U,A)> -}
e4c17504436064baf29fd6d8874df9c1
  qname :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds2 }) -}
dfb023d67afe219245e7a3690d9c4c5a
  queryPlus :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds6 }) -}
4c89cda472200e227b90d2a0f7440ace
  rdint :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>, Unfolding: (Lib.toBinInt) -}
5d51daa1fa87fbd4a82734b1b4b95d36
  readSAMFlag :: GHC.Types.Int -> Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>,
     Unfolding: (\ (flag1 :: GHC.Types.Int) ->
                 Lib.SAMFlag
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 1# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 2# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 4# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 8# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 16# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 32# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 64# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 128# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 256# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 512# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   (case flag1 of wild { GHC.Types.I# x# ->
                    case GHC.Prim.andI# x# 1024# of wild1 {
                      DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } })
                   flag1) -}
958ce4021a6759c0d407e78601c70a2c
  readint :: GHC.Base.String -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Lib.readint3
                           s) of wild {
                   [] -> Lib.readint2
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Lib.readint1 } }) -}
b36b1d0eec6811971863c092a0436cf2
  readint1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
4ed2e86d6650663c02465720c43eeb60
  readint2 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
0af673abf43f9137640b3a6470237ece
  readint3 :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: ((GHC.Read.$fReadInteger3
                    GHC.Read.$fReadInteger_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <GHC.Integer.Type.Integer>_R)
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
bed67c7951cfb3a78285e0911419fe11
  refseq :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds14 }) -}
0b3f893441d11619dcb4b29b9c5edb23
  removeDs ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [(GHC.Integer.Type.Integer,
                            Data.ByteString.Internal.ByteString)]) ->
                 GHC.Base.build
                   @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                   (\ @ b
                      (c1 :: (GHC.Integer.Type.Integer,
                              Data.ByteString.Internal.ByteString)
                             -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                      @ b
                      (GHC.List.filterFB
                         @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                         @ b
                         c1
                         Lib.removeDs1)
                      n
                      cs)) -}
d44c186603ea95ac8eeecee2962e8f41
  removeDs1 ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wlvl5 ww4 ww5 ww6 ww7 } }) -}
11a6c5f9449aa02ea7a25bef14c4ef4b
  removeDs2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "D"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
b66560a5ffc18d126e5b0b06785beb99
  rint :: Lib.AlignedRead -> [Lib.BedRecord]
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds21 }) -}
c667230def18758a1bf52e77860a30d9
  rname :: Lib.AlignedRead -> Lib.UChr
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds4 }) -}
7f238616b6e88ee482f2985eb5cf8494
  rnext :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds11 }) -}
c4619aadb10cecf401487665d342b657
  setpintflag :: Data.Foldable.Foldable t => t a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLC(S(S))LLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*C1(U(U)),A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (t :: * -> *)
                   @ a
                   ($dFoldable :: Data.Foldable.Foldable t)
                   (hits :: t a) ->
                 case Data.Foldable.length
                        @ t
                        $dFoldable
                        @ a
                        hits of wild { GHC.Types.I# x ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x 0#) }) -}
a772ffe2f8836bd323bafbbcd77a9b14
  shiftcrds ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
  {- Arity: 2,
     Strictness: <L,1*U(1*U,A)><S(LS(LLLS)),1*U(A,1*U(U,U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString))
                   (w1 :: (GHC.Integer.Type.Integer,
                           Data.ByteString.Internal.ByteString)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 case Lib.$wshiftcrds w ww4 ww5 ww6 ww7 of ww8 { (#,#) ww9 ww10 ->
                 (ww9, ww10) } } }) -}
f4e75409a1c4050df92dd2754c408056
  showcigar ::
    (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S(SS(SLSS)),1*U(U,1*U(U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer,
                          Data.ByteString.Internal.ByteString)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Data.ByteString.Internal.PS ww4 ww5 ww6 ww7 ->
                 Lib.$wshowcigar ww1 ww4 ww5 ww6 ww7 } }) -}
5f7fa8129834c96b32484dd50387da83
  skipcolon :: Data.Attoparsec.ByteString.Internal.Parser ()
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.skipcolon1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N <()>_R)) -}
9444d35f7c753a8df7494a6dbc3cd1df
  skipcolon1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         ()
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            ()
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wgo7 @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w4 } }) -}
0866967a25c4b27081ffbb6e70ee5c70
  sndInPair :: Lib.SAMFlag -> GHC.Types.Bool
  RecSel Left Lib.SAMFlag
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.SAMFlag) ->
                 case ds of wild { Lib.SAMFlag ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds9 }) -}
f1252dd9ad95b2804541fa30afd3d364
  spaces ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString [()]
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Lib.spaces1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N <[()]>_R)) -}
92f16331ad02851d7092b41ccbdbc19e
  spaces1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [()]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,A><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [()]
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wspaces @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 } }) -}
26e783382ac3b7c2d29fd214c275a2f5
  spaces2 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> ()
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 4 -}
3e614ffec1590af654e423bb3a62984d
  starcigarP ::
    Data.Attoparsec.Internal.Types.Parser
      Data.ByteString.Internal.ByteString
      [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
  {- Arity: 5,
     Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.starcigarP1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <[(GHC.Integer.Type.Integer,
                             Data.ByteString.Internal.ByteString)]>_R)) -}
0db1e9ec88c5f3ab35b1b327d24b461e
  starcigarP1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wstarcigarP @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w3 w4 } }) -}
788b1d82a4cfea57bb9ffe9ec4d3edb4
  strand :: Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds17 }) -}
95756e0a65ceaaf5e4878a8dca05d084
  sumMatches ::
    [(GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)]
    -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (cigs :: [(GHC.Integer.Type.Integer,
                              Data.ByteString.Internal.ByteString)]) ->
                 Lib.checkcigseqlen2_go cigs Lib.checkcigseqlen1) -}
0c30e8579d047b5ca9939a99c3b13286
  taketrim ::
    GHC.Integer.Type.Integer
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (cnt :: GHC.Integer.Type.Integer)
                   (cs :: [(GHC.Integer.Type.Integer,
                            Data.ByteString.Internal.ByteString)]) ->
                 GHC.List.takeWhile
                   @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                   (\ (x :: (GHC.Integer.Type.Integer,
                             Data.ByteString.Internal.ByteString)) ->
                    case x of wild { (,) x1 ds2 ->
                    case GHC.Integer.Type.leInteger# x1 cnt of wild1 { DEFAULT ->
                    GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 } })
                   cs) -}
3509e94fe07a299a43c7e4bc5d644e4c
  tlen :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds13 }) -}
7f40037046232c32d2e76abb7add3a82
  toBin :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (n :: GHC.Types.Int) ->
                 case Data.Digits.mDigitsRev
                        @ GHC.Types.Int
                        GHC.Real.$fIntegralInt
                        Lib.toBin1
                        n of wild {
                   GHC.Base.Nothing
                   -> case Data.Maybe.fromJust1 ret_ty [GHC.Types.Char] of {}
                   GHC.Base.Just x
                   -> Lib.toBin_go
                        (GHC.List.reverse1
                           @ GHC.Types.Int
                           x
                           (GHC.Types.[] @ GHC.Types.Int)) }) -}
54c149beb11ad1e84e7b78b623b9fe20
  toBin1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
6850c16713b54a2d2cc017deff409331
  toBinInt :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (n :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Lib.toBinInt3
                           n) of wild {
                   [] -> Lib.toBinInt2
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Lib.toBinInt1 } }) -}
5ac28d100e9349d1f89f8c71c7be8d49
  toBinInt1 :: GHC.Types.Int
  {- Strictness: x -}
1332424baee540484a428e02723d627b
  toBinInt2 :: GHC.Types.Int
  {- Strictness: x -}
6595e500c43908875b0a74f585c4552c
  toBinInt3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
9035cf70f8869499bd4a3f8ce0cdab5e
  toBin_go :: [GHC.Types.Int] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
01b78b52007f7d9d7b9f73bca6234667
  trimalignment :: Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 1,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSLLLLL),1*U(U,U,U,U,U,U,U(U,U,U,U),A,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Lib.$wtrimalignment
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 }) -}
0d956a5a1ad87b2500af86e0bc709a71
  trimboth :: Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,U,U,U,U(U,U,U,U),A,U,U,U,U,U,U,U,U,U,U,U,U,U,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Lib.$wtrimboth
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21 }) -}
d7a61a61cb05b86592415d6351176eea
  trimdcigar ::
    Lib.AlignedRead -> Data.ByteString.Internal.ByteString
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U(U,U,U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds9 }) -}
75a5c51d211163d757a070188da0e859
  trimdendpos :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds25 }) -}
137bf214acfcee1b6cefb257edafa0fc
  trimdflag :: Lib.AlignedRead -> GHC.Types.Bool
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds23 }) -}
a673d40404ede63f7c133bb0f9e86670
  trimdpos :: Lib.AlignedRead -> GHC.Integer.Type.Integer
  RecSel Left Lib.AlignedRead
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.AlignedRead) ->
                 case ds of wild { Lib.AlignedRead ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ->
                 ds24 }) -}
533788f93d1b6cef41adf05e77ebc000
  trimfwd :: Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,U,U,U,U(U,U,U,U),A,U,U,U,U,U,U,U,U,U,U,U,U,U,A,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Lib.$wtrimfwd
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww24 }) -}
174a3711c4665cefa76aa7c75974c790
  trimrem1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "D"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
72c2149585370cfbfe6ebdb97928bb95
  trimrem2 ::
    GHC.Integer.Type.Integer
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
    -> [(GHC.Integer.Type.Integer,
         Data.ByteString.Internal.ByteString)]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (cnt :: GHC.Integer.Type.Integer)
                   (cs :: [(GHC.Integer.Type.Integer,
                            Data.ByteString.Internal.ByteString)]) ->
                 let {
                   rem :: [(GHC.Integer.Type.Integer,
                            Data.ByteString.Internal.ByteString)]
                   = GHC.List.dropWhile
                       @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                       (\ (x :: (GHC.Integer.Type.Integer,
                                 Data.ByteString.Internal.ByteString)) ->
                        case x of wild { (,) x1 ds2 ->
                        case GHC.Integer.Type.leInteger# x1 cnt of wild1 { DEFAULT ->
                        GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 } })
                       cs
                 } in
                 case GHC.List.$wlenAcc
                        @ (GHC.Integer.Type.Integer, Data.ByteString.Internal.ByteString)
                        rem
                        0# of ww2 {
                   DEFAULT
                   -> case rem of wild {
                        []
                        -> case GHC.List.badHead
                           ret_ty [(GHC.Integer.Type.Integer,
                                    Data.ByteString.Internal.ByteString)]
                           of {}
                        : x ds2
                        -> case x of wild1 { (,) ds3 y ->
                           case y of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                           case Lib.trimrem1 of wild3 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim./=# dt3 dt7) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqAddr# dt dt4) of wild5 {
                                  GHC.Types.False
                                  -> case Data.ByteString.Internal.$wcompareBytes
                                            dt
                                            dt1
                                            dt2
                                            dt3
                                            dt4
                                            dt5
                                            dt6
                                            dt7 of wild6 {
                                       DEFAULT -> wild GHC.Types.EQ -> ds2 }
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# dt2 dt6) of wild6 {
                                       GHC.Types.False
                                       -> case Data.ByteString.Internal.$wcompareBytes
                                                 dt
                                                 dt1
                                                 dt2
                                                 dt3
                                                 dt4
                                                 dt5
                                                 dt6
                                                 dt7 of wild7 {
                                            DEFAULT -> wild GHC.Types.EQ -> ds2 }
                                       GHC.Types.True -> ds2 } }
                             GHC.Types.True -> wild } } } } }
                   0#
                   -> GHC.Types.[]
                        @ (GHC.Integer.Type.Integer,
                           Data.ByteString.Internal.ByteString) }) -}
31d4222eb12a4b85ea709e4e08285aa8
  trimrev :: Lib.AlignedRead -> Lib.AlignedRead
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,U,U,U,U(U,U,U,U),A,U,U,U,U,U,U,U,U,U,U,U,U,U,A,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.AlignedRead) ->
                 case w of ww { Lib.AlignedRead ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Lib.$wtrimrev
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww23 }) -}
2deabd32cd7c239e61f036e356591812
  txtfieldp ::
    Data.Attoparsec.ByteString.Internal.Parser
      Data.ByteString.Internal.ByteString
  {- Arity: 5,
     Strictness: <S(SLSSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,A><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.optfieldsp4
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N
                          <Data.ByteString.Internal.ByteString>_R)) -}
e2a042f7ac8d5db0814a398fb76201de
  uchrp :: Data.Attoparsec.ByteString.Internal.Parser Lib.UChr
  {- Arity: 5,
     Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Lib.uchrp1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                          <Data.ByteString.Internal.ByteString>_N <Lib.UChr>_R)) -}
dad79ba621ee4aaa390f21f57d7503ae
  uchrp1 ::
    Data.Attoparsec.Internal.Types.State
      Data.ByteString.Internal.ByteString
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.ByteString.Internal.ByteString
         (Data.Attoparsec.Internal.Types.State
            Data.ByteString.Internal.ByteString)
         Lib.UChr
         r
    -> Data.Attoparsec.Internal.Types.IResult
         Data.ByteString.Internal.ByteString r
  {- Arity: 5,
     Strictness: <S(LLLSLL),1*U(U,U,U,U,U,U)><S(S),1*U(U)><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   (w :: Data.Attoparsec.Internal.Types.State
                           Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Attoparsec.Internal.Types.Pos)
                   (w2 :: Data.Attoparsec.Internal.Types.More)
                   (w3 :: Data.Attoparsec.Internal.Types.Failure
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            r)
                   (w4 :: Data.Attoparsec.Internal.Types.Success
                            Data.ByteString.Internal.ByteString
                            (Data.Attoparsec.Internal.Types.State
                               Data.ByteString.Internal.ByteString)
                            Lib.UChr
                            r) ->
                 case w `cast`
                      (Sub (Data.Attoparsec.Internal.Types.D:R:StateByteString[0])) of ww { Data.Attoparsec.ByteString.Buffer.Buf ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.N:Pos[0]) of ww7 { GHC.Types.I# ww8 ->
                 Lib.$wuchrp @ r ww1 ww2 ww3 ww4 ww5 ww6 ww8 w2 w3 w4 } }) -}
3e35a2998bc89c78a329459e52de7620
  updateCigB ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U,U,U,U)> -}
947b223584a985ef790344479d738c38
  updateCigF ::
    GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 2, Strictness: <L,U><L,U(U,U,U,U)> -}
fac46018adff3e7a02f60ef9b5ee1a84
  updateCigR ::
    GHC.Integer.Type.Integer
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 2, Strictness: <L,U><L,U(U,U,U,U)> -}
instance GHC.Enum.Bounded [Lib.UChr] = Lib.$fBoundedUChr
instance GHC.Enum.Enum [Lib.UChr] = Lib.$fEnumUChr
instance GHC.Classes.Eq [Lib.AlignedRead] = Lib.$fEqAlignedRead
instance GHC.Classes.Eq [Lib.BedRecord] = Lib.$fEqBedRecord
instance GHC.Classes.Eq [Lib.SAMFlag] = Lib.$fEqSAMFlag
instance GHC.Classes.Eq [Lib.UChr] = Lib.$fEqUChr
instance GHC.Classes.Ord [Lib.AlignedRead] = Lib.$fOrdAlignedRead
instance GHC.Classes.Ord [Lib.BedRecord] = Lib.$fOrdBedRecord
instance GHC.Classes.Ord [Lib.UChr] = Lib.$fOrdUChr
instance GHC.Show.Show [Lib.AlignedRead] = Lib.$fShowAlignedRead
instance GHC.Show.Show [Lib.BedRecord] = Lib.$fShowBedRecord
instance GHC.Show.Show [Lib.SAMFlag] = Lib.$fShowSAMFlag
instance GHC.Show.Show [Lib.UChr] = Lib.$fShowUChr
"SPEC/Lib $fEq(,) @ Integer @ ByteString" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                     GHC.Integer.Type.Integer)
                                                          ($dEq1 :: GHC.Classes.Eq
                                                                      Data.ByteString.Internal.ByteString)
  GHC.Classes.$fEq(,) @ GHC.Integer.Type.Integer
                      @ Data.ByteString.Internal.ByteString
                      $dEq
                      $dEq1
  = Lib.$s$fEq(,)
"SPEC/Lib fromList @ Int _" [ALWAYS] forall @ a
                                            ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  Data.Map.Strict.fromList @ GHC.Types.Int @ a $dOrd
  = Lib.$sfromList @ a
"SPEC/Lib fromList @ UChr _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord Lib.UChr)
  Data.Map.Strict.fromList @ Lib.UChr @ a $dOrd = Lib.$sfromList2 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

