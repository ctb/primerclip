
==================== FINAL INTERFACE ====================
2017-02-06 19:26:25.203862 UTC

interface main@main:Main 8001
  interface hash: f19596d68818c87cf56dfb6299189688
  ABI hash: 44700d02ff6f5c9546bdb51ea6988b20
  export-list hash: 3dd72ac400489288cfa905b1be8b4733
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7a136245101bebfdcea51cf560ed801f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.cargs
  Main.main
  Main.trimprimers
  Main.Cmd{Main.Cmd bedfile outsamfile samfile}
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-LVnipygDrAR1FEMFhjxcQX
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR
                      base-4.9.0.0 binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      digits-0.3.1@digits-0.3.1-4mVLFgw5UMbHTMvzLfMu2D
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primerclip-0.1.0.0@primerclip-0.1.0.0-FjE9kCGp25DJvgoKA1Jo8Y
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      process-1.4.2.0@process-1.4.2.0
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Char8
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 870c31f42ec324353c13bc791ac05fc3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Strict 6480bb4c7d9fa707cef6369e87f7a8f5
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 2597c3599012c0fa55c30f93a0324f00
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative 031c88d485c50b485154c1052ead17f6
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Builder 3a6eae459efd37ad249a0debb46d23c8
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Extra 0631fb19461b4d86718462c74fa1f864
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative.Types 036a614c38cc82a70634cd11ce8cd86f
import  -/  primerclip-0.1.0.0@primerclip-0.1.0.0-FjE9kCGp25DJvgoKA1Jo8Y:Lib afb7bdf73fa09bb9c80cf983fb1d2ada
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.IO 4bbe6162b66e24a3ce48e078208c8e49
c21e04d575768f9d587d47224b953b2a
  $fEqCmd :: GHC.Classes.Eq Main.Cmd
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Main.Cmd Main.$fEqCmd_$c== Main.$fEqCmd_$c/= -}
c21e04d575768f9d587d47224b953b2a
  $fEqCmd_$c/= :: Main.Cmd -> Main.Cmd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Cmd) (b :: Main.Cmd) ->
                 case Main.$fEqCmd_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c21e04d575768f9d587d47224b953b2a
  $fEqCmd_$c== :: Main.Cmd -> Main.Cmd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Cmd) (w1 :: Main.Cmd) ->
                 case w of ww { Main.Cmd ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.Cmd ww5 ww6 ww7 ->
                 Main.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
c21e04d575768f9d587d47224b953b2a
  $fShowCmd :: GHC.Show.Show Main.Cmd
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Cmd
                  Main.$fShowCmd_$cshowsPrec
                  Main.$fShowCmd_$cshow
                  Main.$fShowCmd_$cshowList -}
c21e04d575768f9d587d47224b953b2a
  $fShowCmd1 :: Main.Cmd -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Cmd) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Cmd ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
87e1d85f6f3e1573124bb12eaa244a89
  $fShowCmd2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
8e8421e54c3c51a3cd140f8ffda07ad5
  $fShowCmd3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "outsamfile = "#) -}
b4bd2e3d9402a0683816058bb5cc76cd
  $fShowCmd4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bedfile = "#) -}
d95cf73c6291ff45f106721c45c318fd
  $fShowCmd5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
76416234aff10492269a97be9a6f1554
  $fShowCmd6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "samfile = "#) -}
7a30887cbdaed86f0d47ad10f9a2c9f1
  $fShowCmd7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cmd {"#) -}
c21e04d575768f9d587d47224b953b2a
  $fShowCmd_$cshow :: Main.Cmd -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Cmd) ->
                 Main.$fShowCmd_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c21e04d575768f9d587d47224b953b2a
  $fShowCmd_$cshowList :: [Main.Cmd] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Cmd Main.$fShowCmd1) -}
c21e04d575768f9d587d47224b953b2a
  $fShowCmd_$cshowsPrec ::
    GHC.Types.Int -> Main.Cmd -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Cmd) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Cmd ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
93e1824a03b56a104e5cb7d88c594fb2
  $tc'Cmd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7121388747227716206##
                   2008801125535667301##
                   Main.$trModule
                   Main.$tc'Cmd1) -}
214056d70f3751b083740fc92c9e81fa
  $tc'Cmd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cmd"#) -}
49940ed3209dc55ec46e705eeb137154
  $tcCmd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10739131892797576262##
                   11963618654651401271##
                   Main.$trModule
                   Main.$tcCmd1) -}
7c074cb7a855a539f4f2f002d7eba83a
  $tcCmd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Cmd"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
618ad4e92c7dcb7a762407006b0de06a
  $w$c== ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Base.eqString ww2 ww5 } }) -}
557508e8c3e3d78785b8e2ac3e66d625
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowCmd7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowCmd6
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows8
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Main.$fShowCmd5
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowCmd4
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows8
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Main.$fShowCmd5
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        Main.$fShowCmd3
                                                        (GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.shows8
                                                           (GHC.Show.showLitString
                                                              ww3
                                                              (GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 GHC.Show.shows8
                                                                 (GHC.Base.++
                                                                    @ GHC.Types.Char
                                                                    Main.$fShowCmd2
                                                                    x)))))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
c21e04d575768f9d587d47224b953b2a
  data Cmd
    = Cmd {samfile :: GHC.Base.String,
           bedfile :: GHC.Base.String,
           outsamfile :: GHC.Base.String}
a568ea1e8c90ce1120c5056870f32ed2
  bedfile :: Main.Cmd -> GHC.Base.String
  RecSel Left Main.Cmd
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cmd) ->
                 case ds of wild { Main.Cmd ds1 ds2 ds3 -> ds2 }) -}
5cdc8240c1f0dd2077af03eb8e6ca33b
  cargs :: Options.Applicative.Types.Parser Main.Cmd
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Main.Cmd
                   @ GHC.Base.String
                   Main.cargs7
                   Main.cargs1) -}
0ba60ecd734ab7a5d3c1c5d29f6ab246
  cargs1 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   Main.cargs2
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
12199df251e756a472f3e0f58e709ccf
  cargs10 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   Main.cargs5
                   Main.cargs11) -}
7dbaa6231e44772be2c73fb60075d4e4
  cargs11 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.cargs_var1
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
00aacf8106120c09b20d57d634e41e22
  cargs12 ::
    Options.Applicative.Types.Parser
      (GHC.Base.String -> GHC.Base.String -> Main.Cmd)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ GHC.Base.String
                   @ (GHC.Base.String -> GHC.Base.String -> Main.Cmd)
                   Main.Cmd
                   Main.cargs13) -}
32c1ba492931e81e7508f059ca7b9a28
  cargs13 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   Main.cargs14
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
1909cd798e56e03ff76cdeae58f5933e
  cargs14 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   Main.cargs15) -}
3b00726f0c980610a021c149bb60e102
  cargs15 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   Main.cargs5
                   Main.cargs16) -}
ae0e21e471b43e384feb22458a07bcad
  cargs16 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.cargs_var2
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
7ef74c41650d03b51430dfb8ac832d05
  cargs2 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   Main.cargs3) -}
c0bce9bb48c6aeade34e8a110d2f604d
  cargs3 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   Main.cargs5
                   Main.cargs4) -}
1d36cdece5e55ae06691101feac3ae8d
  cargs4 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   (GHC.Base.Nothing @ Text.PrettyPrint.ANSI.Leijen.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Doc>_N)
                   Main.cargs_var
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
c707c01c17ce6058c55bd9e02d1e636c
  cargs5 :: Options.Applicative.Types.OptReader GHC.Base.String
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Options.Applicative.Types.ArgReader
                   @ GHC.Base.String
                   Main.cargs6) -}
e8204b59f4fb72f89e2d49d866cf5a7c
  cargs6 :: Options.Applicative.Types.CReader GHC.Base.String
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.Base.String
                   Options.Applicative.Types.$fMonoidCompleter4
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R))
                        (Sym (Options.Applicative.Types.N:Completer[0])))
                   (Data.Either.Right
                      @ Options.Applicative.Types.ParseError
                      @ GHC.Base.String)
                     `cast`
                   (Trans
                        (<GHC.Base.String>_R
                         ->_R Trans
                                  (Sym (Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either
                                               Options.Applicative.Types.ParseError
                                               GHC.Base.String>_R))
                                  (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Options.Applicative.Types.ParseError>_N
                                            <Data.Functor.Identity.Identity>_R
                                            <GHC.Base.String>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <GHC.Base.String>_R
                                       <Control.Monad.Trans.Except.Except
                                          Options.Applicative.Types.ParseError>_R
                                       <GHC.Base.String>_N))
                             (Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.Base.String>_N)))) -}
e5177b4204b543fa7b1757bf1da7044d
  cargs7 ::
    Options.Applicative.Types.Parser (GHC.Base.String -> Main.Cmd)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (GHC.Base.String -> Main.Cmd)
                   @ GHC.Base.String
                   Main.cargs12
                   Main.cargs8) -}
1636540586d0b79af01261c840537bd5
  cargs8 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   Main.cargs9
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
b4a3cc8127ab92623deaed802c86e88c
  cargs9 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   Main.cargs10) -}
8a5cf29aecc1ca607d8c430da9dc3c43
  cargs_var :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "OUTPUT_SAM_FILENAME"#) -}
bf6732bccf60669e6d972dce445be7f4
  cargs_var1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "PRIMER_BED_INFILE"#) -}
8a6a0151c93c832affbe0f269434a9f7
  cargs_var2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "SAM_INFILE"#) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
b08d228f4059532a99441778635cdde9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9c851716c9aea22cde0ac20de886f8cd
  outsamfile :: Main.Cmd -> GHC.Base.String
  RecSel Left Main.Cmd
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cmd) ->
                 case ds of wild { Main.Cmd ds1 ds2 ds3 -> ds3 }) -}
9e39e0003bc09d4846421a672cbf715a
  samfile :: Main.Cmd -> GHC.Base.String
  RecSel Left Main.Cmd
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cmd) ->
                 case ds of wild { Main.Cmd ds1 ds2 ds3 -> ds1 }) -}
efe4a595f7748af4b21a208f7575dfa7
  trimprimers :: Lib.BED -> Lib.Alignments -> Lib.Alignments
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><S,1*U> -}
instance GHC.Classes.Eq [Main.Cmd] = Main.$fEqCmd
instance GHC.Show.Show [Main.Cmd] = Main.$fShowCmd
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

